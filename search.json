[
  {
    "objectID": "copyright.html",
    "href": "copyright.html",
    "title": "Sharing work of others: Copyright",
    "section": "",
    "text": "By default, everything you put into the project folder will be shared publicly. This typically includes:\nCopyright and licensing can be complicated. In this chapter, we focus on rather simple (but typical) situations. For an in-depth explanation of copyright and licenses, see our supplementary in-depth material “Introduction to Copyright and Licenses”.",
    "crumbs": [
      "Home",
      "Sharing work of others: Copyright"
    ]
  },
  {
    "objectID": "copyright.html#short-introduction-to-copyright-and-licenses",
    "href": "copyright.html#short-introduction-to-copyright-and-licenses",
    "title": "Sharing work of others: Copyright",
    "section": "Short Introduction to Copyright and Licenses",
    "text": "Short Introduction to Copyright and Licenses\nWhenever authors create a literary or artistic work (such as a text, image, video, or software), the copyright law1 in most countries limits other people from copying, modifying, and sharing it without the author’s express permission. Copyright licenses enable authors to free up their works for reuse by others.\nA license is a legal document that regulates what other people than the author can and cannot do with a copyright-protected work, and under which conditions. We strongly recommend to use existing boilerplate licenses (and not to craft your own license text).\n\n\nFor the purpose of this chapter, by license we mean copyright license.\nWorks under a free/open license “can be freely studied, applied, copied and/or modified, by anyone, for any purpose” (Möller et al., 2015). Importantly, this also means that others do not need to ask or notify the author and that they can use it also for commercial purposes. If you modified the work and put a sufficient amount of creativity into it, the result is called a derivative work.\nEven for free licenses, authors can place certain demands on re-users of their material. For example, they can (optionally) …\n\ndemand that they are credited as the creators of a work,\nthat the original license must be indicated when a work is reused,\nthat modifications are indicated,\nthat derivative works are only shared under the same license, or\nthat no further restrictions are imposed on the derivative work.\n\nWe explain below how to choose a license that brings the desired “settings”.",
    "crumbs": [
      "Home",
      "Sharing work of others: Copyright"
    ]
  },
  {
    "objectID": "copyright.html#can-i-share-the-work-of-others",
    "href": "copyright.html#can-i-share-the-work-of-others",
    "title": "Sharing work of others: Copyright",
    "section": "Can I Share the Work of Others?",
    "text": "Can I Share the Work of Others?\nTo determine whether a particular work can be included in the project folder and shared publicly, the first step is to search for its license. For example, this tutorial has an About page detailing its licensing, whereas other websites sometimes state the license in the footer.\nOther places to look for license statements include a project’s README file or a dedicated LICENSE or COPYING file. If a project has been stored in a research repository, sometimes the license is stored in the metadata of the project and displayed somewhere on the project’s page.\nIf you cannot find any license, the work might be in the public domain (see details here). In this case, you can simply reuse it.\nIf no license notice is present and the work is not in the public domain, it is by default in copyright and you are generally not allowed to share it with others. You can, however, ask the author to put the corresponding work under a free/open license – Wikimedia Commons provides an email template to obtain such a permission.\nOnce you found a license, you need to determine whether it is a standard (boilerplate) license and whether it is a free/open. Then you can share the reused material in your repository.\nHere are typical licenses that are free/open:\n\nSoftwareWriting, Images, Audio, VideoData\n\n\nFor a software license to be considered free/open, it must be approved by either the Open Source Initiative (OSI) or the Free Software Foundation (FSF). Some of the most common free/open software licenses are listed below:\n\n\n\n\nGNU Affero General Public License v3.0 (AGPL-3.0)\n\nYou can share under these conditions:\n\nAttribution\nAdd license text\nState changes\nDisclose code\nStrong copyleft\n\nLink to full text\n\n\n\nGNU General Public License v3.0 (GPL-3.0)\n\nYou can share under these conditions:\n\nAttribution\nAdd license text\nState changes\nDisclose code\nStrong copyleft\n\nLink to full text\n\n\n\nGNU Lesser General Public License v3.0 (LGPL-3.0)\n\nYou can share under these conditions:\n\nAttribution\nAdd license text\nState changes\nDisclose code\nWeak copyleft\n\nLink to full text\n\n\n\nApache License 2.0 (Apache-2.0)\n\nYou can share under these conditions:\n\nAttribution\nAdd license text\nState changes\n\nLink to full text\n\n\n\nMozilla Public License 2.0 (MPL-2.0)\n\nYou can share under these conditions:\n\nAttribution\nIndicate license\nDisclose code\nWeak copyleft\n\nLink to full text\n\n\n\nMIT License (MIT)\n\nYou can share under these conditions:\n\nAttribution\nAdd license text\n\nLink to full text\n\n\n\nBSD 3-Clause “New” or “Revised” License (BSD-3-Clause)\n\nYou can share under these conditions:\n\nAttribution\nAdd license text\n\nLink to full text\n\n\n\nBSD 2-Clause “Simplified” License (BSD-2-Clause)\n\nYou can share under these conditions:\n\nAttribution\nAdd license text\n\nLink to full text\n\n\n\nIf you did not find a particular software license in this list and consult the resources by the OSI and/or FSF linked above, be cautious because they also approve special-purpose licenses that are unfit for software in the general case. For example, the license CC0 1.0 expressively does not grant patent rights and one should only use software under that license if it is most likely not covered by patents.\n\n\nMany authors of text and media put their work under a license created by Creative Commons. Not all Creative Commons licenses are free/open, however, as some of them prohibit commercial use or the distribution of modified works (such as sharing a translated version). Therefore, we recommend to only use works made available to you under CC0 or under Creative Commons licenses with the modules “Attribution” (BY) or “ShareAlike” (SA), but without the modules “NonCommercial” (NC) and “NoDerivatives” (ND). In their most recent version this includes the following licenses:\n\n\n\n\nCC0 1.0 (CC0-1.0)\n\nYou can share under these conditions: (none)\nLink to full text\n\n\n\nCreative Commons Attribution 4.0 (CC-BY-4.0)\n\nYou can share under these conditions:\n\nAttribution\nIndicate license\nState changes\nAnti-DRM\n\nLink to full text\n\n\n\nCreative Commons Attribution-ShareAlike 4.0 (CC-BY-SA-4.0)\n\nYou can share under these conditions:\n\nAttribution\nIndicate license\nState changes\nAnti-DRM\nCopyleft\n\nLink to full text\n\n\n\nOf course, if you encounter a Creative Commons license with a previous version that satisfies the description above, it can be also considered free/open. If you encounter a license not from Creative Commons and want to determine whether it is free/open, you can consult the lists of licenses accepted at Wikimedia Commons. Note, however, that some of the licenses there might be inappropriate for text and media. For example, licenses for software or for documentation commonly require to distribute a work together with the full license text, which is impractical for usage in print media.\n\n\nPurely factual data such as measurements are usually not copyrightable, but literary or artistic works that cross the threshold of originality are. Additionally, in some jurisdictions, collections of data (i.e., databases) can be subject to sui generis database rights which prevent extracting substantial parts of a database.\nAs a consequence, a database may be licensed differently than its content. For example, with a database of artworks, the artworks may be licensed individually as chosen by the artists, but the license for the database as a whole might have been chosen by the curator, including the selection of entries, field names and any sui generis database rights. Watch out for any signs that the license for the database and its content are not the same. In the following, we list some popular free/open data licenses:\n\n\n\n\nCC0 1.0 (CC0-1.0)\n\nYou can share under these conditions: (none)\nLink to full text\n\n\n\nCreative Commons Attribution 4.0 (CC-BY-4.0)\n\nYou can share under these conditions:\n\nAttribution\nIndicate license\nState changes\nAnti-DRM\n\nLink to full text\n\n\n\nCreative Commons Attribution-ShareAlike 4.0 (CC-BY-SA-4.0)\n\nYou can share under these conditions:\n\nAttribution\nIndicate license\nState changes\nAnti-DRM\nCopyleft\n\nLink to full text\n\n\n\nNote that Creative Commons licenses prior to version 4.0 are not suitable for databases. You might also encounter the following, less popular free/open data licenses:\n\n\n\n\nOpen Data Commons Public Domain Dedication & License 1.0 (PDDL-1.0)\n\nYou can share under these conditions: (none)\nLink to full text\n\n\n\nCommunity Data License Agreement Permissive 2.0 (CDLA-Permissive-2.0)\n\nYou can share under these conditions:\n\nAdd license text\n\nLink to full text\n\n\n\nCommunity Data License Agreement Permissive 1.0 (CDLA-Permissive-1.0)\n\nYou can share under these conditions:\n\nAttribution\nIndicate license\n\nLink to full text\n\n\n\nCommunity Data License Agreement Sharing 1.0 (CDLA-Sharing-1.0)\n\nYou can share under these conditions:\n\nAttribution\nIndicate license\nState changes\nCopyleft\n\nLink to full text\n\n\n\nFinally, you should know about the following two free/open licenses because they only cover the database, but not its individual contents or the works produced from it. If any of these licenses is used, the license for the content must be stated separately.\n\n\n\n\nOpen Data Commons Open Database License v1.0 (ODbL-1.0)\n\nYou can share under these conditions:\n\nAttribution\nIndicate license\nAnti-DRM\nCopyleft\n\nLink to full text\n\n\n\nOpen Data Commons Attribution License v1.0 (ODC-By-1.0)\n\nYou can share under these conditions:\n\nAttribution\nIndicate license\n\nLink to full text\n\n\n\nIf you encounter a license not listed here and want to determine whether it is free/open, you can consult the lists of licenses accepted at Wikimedia Commons. Note, however, that some of the licenses there might be inappropriate for data, because they do not mention sui generis database rights.\n\n\n\n\nUnder Which Conditions?\nFinally, if you verified that the work has been made available to you under a free/open license, you need to understand the conditions under which you are allowed to include the work in your project folder and share it with others – regardless of whether you modified it.\nIn the following, we will explain the most important conditions of the licenses listed above. For other licenses we recommend reading their text in full and/or consulting with a lawyer. The conditions of many popular free/open licenses are also summarized on ChooseALicense.com, which you can use to get a general idea of a license. Specifically for software licenses the Open Source Automation Development Lab provides useful checklists detailing the respective obligations.2\n\n\n\n\n\n\nNote 1: Private Use\n\n\n\nIn the following, we only discuss the conditions under which works may be shared. This is because free/open licenses put no conditions on private use, where the work is not made available to others.\n\n\n\nAttribution\nLicenses may require that you provide attribution to the author(s)3 and to retain any copyright notices,4 although the specifics vary between licenses. For example, Creative Commons licenses other than CC0 require that the name of the author, the title of the work, and a link to the work are provided.\nProjects with many authors often explicitly allow for an attribution to the collective as a whole rather than being mentioned individually. Software projects may use copyright notices that only contain the project name, such as Copyright (c) 2020-2025 The XYZ Project Contributors (Winslow, 2020).\nWhere to put the attribution depends on the type of the work, but in general it is best to keep it close to where the work is used and to provide all required information. For images, for example, this can be a small text next to the image.\n\n\nModifications of the work\nIf a work has been modified, some licenses may require that this is indicated (e.g., with a note “adapted from original”). Other licenses forbid that a work is modified. For example, the NoDerivatives clause of the CC-BY-ND-4.0 licenses say:\n\nIf you remix, transform, or build upon the material, you may not distribute the modified material.\n\nHence, in this case you are free to reuse and redistribute the material - as long as you don’t change it.\n\n\nCommercial reuse\nThe NC clause in the Creative Commons BY-NC (Attribution–NonCommercial) license stands for “NonCommercial”, meaning that others are allowed to use, share, adapt, and build upon the work – but not for commercial purposes. This restriction prohibits any use that is primarily intended for or directed toward commercial advantage or monetary compensation. For example, using the work in an advertisement, selling it, or incorporating it into a product for sale would not be permitted without additional permission from the copyright holder. However, non-profit educational use, personal projects, or sharing within a non-commercial community is generally allowed, as long as proper attribution is given to the original creator.\n\n\nIndicate License / Add License Text\nLicenses may either require that one mentions the applicable license by name and possibly link (“Indicate license”) or they even require to copy the full license text along with the used work (“Add license text”).\n\n\nCopyleft\nIf the original work has been made available under a “copyleft” license, any derivative work that is shared with others must be put under the same license as the original work5 – or you commit a copyright violation.\nThis explains the origin of the term copyleft, as it “turns copyright around” to make works permanently free. In the realm of Creative Commons licenses, copyleft is also called share alike (e.g. in the CC-BY-SA-4.0 license).\nWhat is considered creation of a derivative work varies between jurisdictions, but the following are typical examples: translating a text into a different language, taking a picture of an artwork, adding a song to a video, adapting a computer program to fit own use cases, or taking a screenshot of a computer program. In all of these cases, if the original work is under a copyleft license, then sharing of the resulting derivative work is only allowed if it is put under the same license.\nThe question is then: Which uses of a work do not create a derivative work? In many cases, if an unaltered excerpt “is used to illuminate an idea or provide an example in another larger work” (Creative Commons, 2024a) no derivative work is made. The excerpt needs to “remain separate and distinct in the new context” (Kreutzer, 2024, p. 44) and not be “merged with other material into a new and larger work” (Kreutzer, 2024, p. 45). For example, embedding images in a document and clearly separating them from the rest or assembling works as part of a collection typically would not create a derivative work. However, due to a lack of case law, there is only little guidance on what constitutes a derivative work in general.\nAlso note that the copyleft licenses we discuss here do not mandate sharing. Copyleft (and attribution) clauses are only triggered if the work is shared (Creative Commons, 2015). This means that if you only use a work internally, you do not need to share your derivative works.\n\n\n\n\n\n\nTip 1: Required Information under Creative Commons Licenses\n\n\n\nFor most Creative Commons licenses, providing the following information is required (if available):\n\nOriginal author name\nCopyright notice\nTitle of the work\n\nLink to the work\n\nLicense name\n\nLink to the license\n\nLink to warranty disclaimer\nIndicate modification\n\n\n\nObviously, if you are in doubt whether a condition of the license applies in your use case, it is better to either follow it or to ask the author for clarification or explicit permission.\nWe recommend that you always provide attribution for all works under a free/open license – even if the license does not strictly require it (e.g., CC0). This also follows from the rules of good scientific practice (and not only from copyright law).\n\n\n\n\n\n\nImportant 1: Non-copyright Restrictions\n\n\n\nThe free/open licenses we discuss here mostly grant copyrights (with some of them explicitly granting patent rights and sui generis database rights). Therefore, you may lack other rights such as personality, privacy, moral, or trademark rights. For example, sharing photos that depict people is not only a matter of copyright, but also of privacy rights. Also, their commercial use may require the consent of the depicted person.",
    "crumbs": [
      "Home",
      "Sharing work of others: Copyright"
    ]
  },
  {
    "objectID": "copyright.html#practical-exercise-adding-an-image",
    "href": "copyright.html#practical-exercise-adding-an-image",
    "title": "Sharing work of others: Copyright",
    "section": "Practical Exercise: Adding an Image",
    "text": "Practical Exercise: Adding an Image\nLet’s practice what you learned by adding an image to the manuscript. We’ll use this picture of a penguin from Flickr. First, try to answer the following questions:\n\nUnder which license is the picture available?\nIs it free/open?\nUnder which conditions may the work be shared?\n\n\n\n\n\n\n\nTip 2: License of Penguin Picture (Solution)\n\n\n\n\n\n\nThe picture has been put under the license CC0 1.0\nThe license is free/open\nThe license contains no (major) conditions\n\n\n\n\nYou can now download the image and move it to your project folder (maybe call it penguin.jpg). In your manuscript file, find the line that says “add image here”, remove it, and add the image instead, including proper attribution.\n\n\n\n\n\n\nTip 3: Attribution for Penguin Picture (Solution)\n\n\n\n\n\nAlthough the license CC0 doesn’t require it, we still recommend providing proper attribution.\n\nAuthor name: steve b\nCopyright notice: (not available)\nTitle of the work: Chinstrap Penguin\n\nLink to the work: https://www.flickr.com/photos/192320315@N02/53603388557/ or https://flic.kr/p/2pEKnUr\n\nLicense name: CC0 1.0\n\nLink to the license: https://creativecommons.org/publicdomain/zero/1.0/\n\nLink to warranty disclaimer: (not available)\nIndicate modification: (no existing modification notices)\n\n![\"[Chinstrap Penguin](https://flic.kr/p/2pEKnUr)\" by \"steve b\" licensed under [CC0 1.0](https://creativecommons.org/publicdomain/zero/1.0/)](penguin.jpg){width=50%}\nIf it is likely that the article gets printed, you might want to ensure that the link to the work is retained in that case:\n![\"[Chinstrap Penguin](https://flic.kr/p/2pEKnUr)\" by \"steve b\" available under [CC0 1.0](https://creativecommons.org/publicdomain/zero/1.0/) from [`flic.kr/p/2pEKnUr`](https://flic.kr/p/2pEKnUr)](penguin.jpg){width=50%}\n\n\n\nLet’s render the document and see if the changes were successful (open Manuscript.pdf afterwards):\n\n\nTerminal\n\nquarto render Manuscript.qmd\n\nIn addition, we recommend creating a file called LICENSE.txt to describe the license of the image. Click on File &gt; New File &gt; Text File, then on File &gt; Save, and choose LICENSE.txt as filename.\n\n\nLICENSE.txt\n\n\"Chinstrap Penguin\" stored in \"penguin.jpg\" by \"steve b\" available from &lt;https://flic.kr/p/2pEKnUr&gt; is licensed under CC0 1.0: &lt;https://creativecommons.org/publicdomain/zero/1.0/&gt;\n\nIf the license required adding the full license text, you would also need to copy it to the project folder.\nFinally, you can store the changes in the version control system:\n\n\nTerminal\n\ngit status\ngit add .\ngit commit -m \"Add image\"",
    "crumbs": [
      "Home",
      "Sharing work of others: Copyright"
    ]
  },
  {
    "objectID": "copyright.html#wrap-up",
    "href": "copyright.html#wrap-up",
    "title": "Sharing work of others: Copyright",
    "section": "Wrap-up",
    "text": "Wrap-up\nIf you would like to learn more about copyright and licenses you might find the following resources interesting:\n\nOur own in-depth material on copyright and licenses (which is an extension of this chapter)\n“Open Content – A Practical Guide to Using Creative Commons Licences” by Kreutzer (2024)\n“Creative Commons Certificate for Educators, Academic Librarians, and Open Culture” by Creative Commons (2024b)\n“Freie Software – Zwischen Privat- und Gemeineigentum” by Grassmuck (2004)\n“Rechtsfragen bei Open Science: Ein Leitfaden” by Kreutzer & Lahmann (2021)",
    "crumbs": [
      "Home",
      "Sharing work of others: Copyright"
    ]
  },
  {
    "objectID": "copyright.html#footnotes",
    "href": "copyright.html#footnotes",
    "title": "Sharing work of others: Copyright",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nin Germany: Urheberrecht↩︎\nAccessing the checklists requires a (free) account on their website.↩︎\nor others whose names are provided with the original work↩︎\nSuch as Copyright (c) 2025 Jane Doe↩︎\nor sometimes also under a later version or under a compatible license↩︎",
    "crumbs": [
      "Home",
      "Sharing work of others: Copyright"
    ]
  },
  {
    "objectID": "choose_license.html",
    "href": "choose_license.html",
    "title": "Choose a License",
    "section": "",
    "text": "So far, you took care to legally include works by others in your project folder. Up next, you will free up your project for reuse. This means ensuring that every bit (co-)authored by you in the project is put under a free/open license. It may be that your project (i.e., its files and folders) is not one work, but rather consists of multiple works available under different licenses. In that case, you need to indicate the license on a per-file or per-folder basis (rather than choosing one for the whole project). Sometimes, even different parts of a file might be subject to different licenses. For the purpose of this tutorial, we will consider the manuscript and the bibliography which you edited.",
    "crumbs": [
      "Home",
      "Choose a License"
    ]
  },
  {
    "objectID": "choose_license.html#which-license-to-choose-for-a-work",
    "href": "choose_license.html#which-license-to-choose-for-a-work",
    "title": "Choose a License",
    "section": "Which License to Choose for a Work?",
    "text": "Which License to Choose for a Work?\nMany boilerplate licenses are available to apply to your work. Which license is appropriate depends on several factors, including existing licenses in place and the type of work, but also your personal considerations. We strongly recommend to apply a free/open license to your work that fits to the work type and potential use cases. Because there are many free/open licenses available, the licenses discussed here only represent a recommended subset.\n\n\nIf you would like to choose a license not listed here, it should be appropriate for the type of work in question and be compatible with the dominant copyleft license in the respective community (see also Note 3). For software that’s almost universally the (A)GPLv3 and for writing, image, audio, and video that’s mostly the CC BY-SA 4.0. For databases, no dominant copyleft license has emerged yet, so any of ODbL 1.0, CDLA Sharing 1.0, and CC BY-SA 4.0 are acceptable.\n\nExisting License?\nFirst, if you adapt (i.e., modify, remix, build on) a work by others you need to determine if it is provided to you under a free/open license. If yes, we recommend you to make your contribution available under the same license.1 For example, if you adapt code published in another paper, choose the same license for your modifications. The same applies if there are strong community norms to use a particular free/open license2 or if a particular license choice is mandated by your funder. Importantly, as discussed before, you are generally not allowed to adapt a work not published under a free/open license.\n\n\nWork Type?\nIf you create a new work and no strong community norms suggest a particular license, you need to choose the license yourself. Which license to choose depends on the type of work you create. We have created a flowchart that covers the most likely types of works you will create as a researcher: software, writing (i.e., text), images, audio, video, and data (see Figure 1). This flowchart always recommends the most permissive license possible to maximize reuse – though we provide two additional flowcharts below that allow for more choices. Click on the name of a license to learn more about it.\n\n\n\n\n\n\nTip 1: Multi-licensing\n\n\n\nSometimes, the type of a work is not obvious. For example, a Quarto document…\n\n…contains both R code and writing, and\n…may be distributed in the source format or as rendered document, possibly including images.\n\nOne may wonder which license to apply in this case, because Creative Commons licenses are not recommended for source code3 and applying software licenses to PDFs or images can lead to confusion or nuisance.4\nOne solution is to make such a work simultaneously available under two (or more) licenses, at the choice of the recipient: Either under a specified software license, or under a Creative Commons license.5 This is called multi-licensing and makes it easier to reuse both the rendered document as well as the code. For example, one could write:\n\nThe Quarto documents in this project are made available under CC0 1.0 or (at your option) under the terms of the Apache License 2.0.\n\n\n\nWe already mentioned that a database may be licensed differently than its content. However, if the content was created by you, we recommend you to choose the same license for both content and database. Factual data (like measurements or metadata) should be made available with CC0 1.0 (Villa, 2016a, 2016b) – otherwise, consult Note 2 for some caveats.\n\n\n\n\n\n\n\n\nflowchart TB\n  start(\"We want&lt;br&gt;to choose&lt;br&gt;a license.\") --\"We adapted a work by&lt;br&gt;others shared under a&lt;br&gt;free/open license.\"--&gt; use_existing_license[\"&lt;em&gt;Use its license&lt;/em&gt;\"]\n  start --\"We created the work&lt;br&gt;entirely by ourselves.\"--&gt; regulation(\"Other regulation&lt;br&gt;(by community or funder)&lt;br&gt;concerning license?\")\n  \n  regulation --\"Exists\"--&gt; follow_existing_norms[\"&lt;em&gt;Follow that&lt;/em&gt;\"]\n  regulation --\"Does not&lt;br&gt;exist\"--&gt; type(\"Work type?\")\n  \n  type --\"Software\"--&gt; apache[\"Apache 2.0\"]\n  type --\"Writing, image, audio, video\"--&gt; cc0[\"CC0 1.0\"]\n  type --\"Data(base)\"--&gt; existing_license_data(\"Adapting individual&lt;br&gt;data entries by others?\")\n  \n  existing_license_data --\"No, we created them&lt;br&gt;entirely by ourselves.\"--&gt; cc0_data[\"CC0 1.0 &lt;em&gt;for database&lt;br&gt;and its content&lt;/em&gt;\"]\n  existing_license_data --\"Yes, they were&lt;br&gt;shared under a&lt;br&gt;free/open license.\"--&gt; use_existing_license_data[\"&lt;em&gt;Use their license&lt;br&gt;for content and&lt;/em&gt;&lt;br&gt;CC0 1.0 &lt;em&gt;for&lt;br&gt;the database&lt;/em&gt;\"]\n  \n  click apache href \"https://choosealicense.com/licenses/apache-2.0/\"\n  click cc0 href \"https://creativecommons.org/publicdomain/zero/1.0/\"\n  click cc0_data href \"https://creativecommons.org/publicdomain/zero/1.0/\"\n\n\n\n\n\n\n\n\nFigure 1: Flowchart for Choosing a License\n\n\n\n\n\n\n\n\n\nNote 2: Other Work Types\n\n\n\n\n\nOne should take special care when applying license to the following types of works:\n\nfonts: Copyleft licenses applied to fonts can be a special case: If a font is put under the license CC BY-SA 4.0, any documents containing texts using that font will probably be derivative works and have to be put under the same license if shared. The SIL Open Font License 1.1 is the de facto standard license for fonts, requiring that derived fonts, if published, have to be put under the same license. It doesn’t require attribution for usage (e.g., when embedded in a document), but forbids that the font is sold by itself. Selling the font is allowed, however, if it is bundled with other software.\ntemplates and TeX packages: If a template or, for this purpose, a \\(\\TeX\\) package, is licensed under a copyleft license such as the (A)GPLv3, every work that is a derivative of it has to be put under the same license if shared. If a document contained source code covered by the (A)GPLv3, it depends on the individual case whether the same license needs to be applied to the document if shared.\ndatabase content: If the work produced from a database (the “output”) is a derivative of the content in the database, the output is subject to the restrictions laid out in the license. For example, if geospatial data were to be licensed under CC BY 4.0, all maps produced from the data would likely need to fulfill this license’s obligation for unrestricted access (its Anti-DRM provision) if shared (see Poole, 2017). Similarly, following an example from Matt (2009), if one were to choose the copyleft license CC BY-SA 4.0 for this purpose, any map that is a derivative of the data would also need to be licensed under CC BY-SA 4.0 (or a compatible license) if shared. If the intention is to only have derivative databases under the same license, one might want to choose the ODbL 1.0 for the database, as it was specifically designed not to apply to works produced from the data in the database. Otherwise CC0 1.0 is an excellent choice for data.\nworks in the public domain: If a work is already in the public domain, it should be marked using the PDM 1.0, rather than applying a waiver such as the CC0 1.0 (or another license).\n\n\n\n\n\n\nCopyleft?\nYou may prefer that adaptations of your work stay free/open and thus choose a copyleft license. Of course, this does not restrict you as the original author: You are still permitted to distribute the work under a different license and without sharing the source code.\n\n\n\n\n\n\nTip 2: Projects Involving R Code\n\n\n\nIn most cases, the output of software, like images or tables, does not depend on the software’s license.6 Therefore, if you use an R package under a copyleft license to create a figure, you are likely the copyright owner. However, if the output is based on data, it can be considered a derivative work of the data and the license of the data also applies. For example, maps may be considered as a derivative of the geographic data they are based on.\nIt is disputed whether software that uses an R package under AGPLv3 or GPLv37 can only be published under a GPL-compatible license – or even has to be published under the same license. Posit, the company behind RStudio, does not believe that to be the case (see also Wickham & Bryan, 2023).\nYou can learn which license an installed package uses via packageDescription(\"&lt;PACKAGE_NAME&gt;\", fields = \"License\"). And to identify which licenses are being used by the R packages your project depends on, you can use the following code:\n\n\nConsole\n\ndeps &lt;- renv::dependencies()$Package |&gt;\n  unique() |&gt;\n  pak::pkg_deps(dependencies = NA) |&gt;\n  getElement(\"package\")\nunique(installed.packages(fields=\"License\")[deps, \"License\"])\n\n\n\nWe have prepared two advanced license flowcharts, one for software, writing, images, audio, and video in Figure 2 and one for data in Figure 3 where you can make additional choices. Note, however, that especially the advanced flowchart for licensing data is quite complex and we recommend you to seek legal counsel if you want to be sure.\n\n\nAdditional considerations\nThe advanced license flowcharts also allow you to make additional decisions, such as whether attribution should be a condition of redistribution. As you have learned, even if attribution is not a condition of the license, there are other reasons for attributing you as an author (such as scientific citation standards or moral rights). All conditions are explained on the page on copyright.\nFrom the Creative Commons licenses, only CC0 1.0 does not require providing attribution, and all software licenses in Figure 2 require providing attribution. As an author, you are free to waive license conditions such as attribution, however.\n\n\n\n\n\n\nNote 3: Other Restrictions\n\n\n\n\n\nCreative Commons also offers licenses which prevent commercial use of a work and/or sharing of derivative works. A free/open license, however, must allow creating derivative works and must allow exercising the rights granted by it for any purpose, including commercial use. Otherwise, creating adaptations from multiple works by different authors would either limit commercial use for everybody (including the authors) or would not be possible at all (when including materials with a copyleft license), effectively creating silos of works which are mutually incompatible with each other. This is especially relevant for work types for which adaptations are created frequently, such as text, data, and source code. In order to avoid silos, one should only choose licenses which are compatible with the dominant copyleft license in the respective community (Lämmerhirt, 2017; Wheeler, 2014). If you would like to learn more about the different types of compatibility, we recommend you to read the article “A Quick Guide to Software Licensing for the Scientist-Programmer” by Morin et al. (2012). The following diagram provides an overview of the compatibility of various licenses:\n\n\n\n“Open data-capable license interoperability” by Robbie Morrison (2024) licensed under CC BY 4.0",
    "crumbs": [
      "Home",
      "Choose a License"
    ]
  },
  {
    "objectID": "choose_license.html#applying-the-license",
    "href": "choose_license.html#applying-the-license",
    "title": "Choose a License",
    "section": "Applying the License",
    "text": "Applying the License\nHaving selected the license(s) of your choice, we encourage you to read through the full license text (or at least a legal summary) to understand the legal effect. The following applies to all licenses mentioned here:\n\nApplying the license is irrevocable. You may stop distributing your work, but everybody who already received it may continue to share it.\nAs an author applying the license, you are not bound by the license terms. You cannot, however, give others an exclusive license to your content anymore (as some journals needlessly demand, see Warning 1).\nBy applying the license you share with others your right to use your work for commercial purposes, including selling it.\nIf you apply the license to an image, the license may also apply to a higher resolution version of your image.\nIf you apply a copyleft license to an image, a document in which the image is used may not constitute a derivative work and, as such, may not be affected by the copyleft condition.\nIf you are a member of a collecting society8 or if the work was created as part of your job, you may not be able to apply the license. Check with your collecting society or your employer in that case.\n\n\n\n\n\n\n\nNote 4: For Researchers at LMU Munich\n\n\n\n\n\nIf you are an employee at LMU and your funder does not mandate the use of a particular license, the decision of which license to use lies with the holder of your chair (Lehrstuhlinhaber*in). The only exception is the case that you developed an invention you would like to exploit commercially with a patent. Then, you are required to officially report your invention to the IP management team of the LMU, which will work out the next steps with you.\n\n\n\nFor Creative Commons licenses, the following is additionally important to know:\n\nBy applying the license you waive any moral, publicity, privacy, or other similar personality rights to the extent necessary to use the work.\nThe attribution requirement may be implemented “in any reasonable manner”, possibly not conforming to your precise expectations.\n\nApplying a license to a work mostly just means indicating which file or folder is covered by which license(s) (no sort of registration is required). There are multiple standards on how to do so:\n\nYou have already learned about the file LICENSE.txt. Either it contains the full text of one license that applies to the whole project folder – this is a practice propagated by GitHub, which provides instructions for and comparisons of many licenses via ChooseALicense.com. Alternatively, it details which license applies to what and the individual licenses are stored in the same or in different files.\nA summary of the licensing situation is often given in a README file, whose creation will be discussed later.\nIf only parts of a file are covered by a certain license, then it might make sense to indicate this directly in the file.\nThe license of embedded elements (e.g., images) is either given directly beneath to where they are embedded, at the end of the respective page, or collectively on a separate page.\nIndividual programming languages also have their own way of stating which license a package is distributed under. For R packages, this is usually set by the field License in the file DESCRIPTION (Wickham & Bryan, 2023).\nSoftware projects often indicate the license in every file, following the REUSE specification to make the choice of license machine-readable (explained in Note 5).\nThe following two metadata standards for increasing citability also allow to indicate the license:\n\nCodeMeta: All information are stored in a file called codemeta.json, which can be created on their website. Alternatively, one can use the R package codemetar to create this file.\nCitation File Format (CFF): Here, everything is stored in a file called CITATION.cff. It is used by GitHub to directly show a recommended citation for a repository. The file can be created on their website. Alternatively, the R package cffr may be used for that purpose.\n\n\n\n\n\n\n\n\nTip 3: Follow the Help Provided by the License Authors\n\n\n\nFor all the licenses recommended in this tutorial, the organizations that created these licenses provide more information on how to apply them to your work:\n\n\n\n\nApache 2.0\nMPL 2.0\nAGPLv3\n\n\n\n\nCC licenses\nODbL 1.0\n\n\n\n\nCreative Commons even provides a range of considerations for licensors and licensees (Creative Commons, 2013) and an interactive chooser which you can use to create text snippet that you can copy and paste to the desired location.\n\n\n\n\n\n\n\n\nNote 5: Using REUSE to Record Licenses\n\n\n\n\n\nEvery major free/open license has a unique SPDX identifier which allows communicating the license choice unequivocally. We will be using that to indicate the license for every file in your project folder, along with the year of publication and the copyright holder. To do this, we add a comment to the beginning of every file and include the two tags SPDX-FileCopyrightText and SPDX-License-Identifier. How this works depends on the file type, as the syntax for a comment varies.\nFor example, the file Manuscript.qmd was provided to you under CC0 1.0. You can indicate that by adding the following comment to the beginning of the file:\n\n\nManuscript.qmd\n\n&lt;!--\nSPDX-FileCopyrightText: 2024 Christoph Scheffel\nSPDX-FileCopyrightText: 2024 Josephine Zerna\n\nSPDX-License-Identifier: CC0-1.0\n--&gt;\n\nYou need to use &lt;!-- and --&gt; to start and end the comment because this is the convention that starts comment lines in Quarto files. Alternatively, you can use the reuse tool to add these information for you. After installing it with…\n\n\nTerminal\n\npipx install reuse\n\n…you can add the copyright information using the following command – the current year will be added automatically. In many cases, the reuse tool will figure out the appropriate comment style for you. If this is not the case, as currently with Quarto files, you can tell it directly which comment style to use (html in this case):\n\n\nTerminal\n\nreuse annotate --copyright=\"Josephine Zerna\" --copyright=\"Christoph Scheffel\" --license=\"CC0-1.0\" --style=html Manuscript.qmd\n\nAs you edited the file throughout this tutorial, you may also add yourself.9\n\n\nTerminal\n\nreuse annotate --copyright=\"&lt;YOUR NAME&gt;\" --license=\"CC0-1.0\" --style=html Manuscript.qmd\n\nSometimes, there are file types which do not allow for adding the license information inside them, such as PDF and CSV files. For these, a corresponding .license file can be created. Try the following command which indicates that the data were published under CC0 1.0:\n\n\nTerminal\n\nreuse annotate --copyright=\"Allison Horst\" --copyright=\"Alison Hill\" --copyright=\"Kristen Gorman\" --license=\"CC0-1.0\" data.csv\n\nYou will notice that this creates another file called data.csv.license containing the relevant information:\n\n\ndata.csv.license\n\nSPDX-FileCopyrightText: 2024 Allison Horst\nSPDX-FileCopyrightText: 2024 Alison Hill\nSPDX-FileCopyrightText: 2024 Kristen Gorman\n\nSPDX-License-Identifier: CC0-1.0\n\nIf you want to indicate the license for all files in a particular folder, you can create a file called REUSE.toml and add an [[annotations]] table for them:\n\n\nREUSE.toml\n\nversion = 1\n\n# apaquarto extension from https://github.com/wjschne/apaquarto\n[[annotations]]\npath = \"_extensions/wjschne/apaquarto/*\"\nSPDX-FileCopyrightText = \"2024 William Joel Schneider &lt;w.joel.schneider@gmail.com&gt;\"\nSPDX-License-Identifier = \"CC0-1.0\"\n\nFinally, there may be some minor files which are build artifacts. You can either add them to your .gitignore file or use CC0 1.0 with a copyright tag such as SPDX-FileCopyrightText: NONE to assert that there is no copyright holder. For more information, also discussing other corner cases, you can read their Frequently Asked Questions.\nOnce you are done, you can download the texts of all indicated licenses using…\n\n\nTerminal\n\nreuse download --all\n\n…and verify that you did not miss a file by running…\n\n\nTerminal\n\nreuse lint\n\n\n\n\nThe manuscript and the bibliography file you downloaded for this tutorial are made available to you under CC0 1.0 as is all code in this tutorial (e.g., for the data analysis). Therefore, you can apply any license to your modified version. Please apply the license of your choice now, using any of the methods mentioned above (except the README, which we will cover later).\n\n\n\n\n\n\nTip 4: Addition to LICENSE.txt (Solution)\n\n\n\n\n\nIn the following example, the edited manuscript files have been multi-licensed under AGPLv3 (or later) or (at option of the reuser) under CC BY-SA 4.0, while the bibliography is made available under CC0 1.0.\n\n\nLICENSE.txt\n\nThe Quarto documents stored in \"Manuscript.qmd\", \"Manuscript.tex\", and \"Manuscript.pdf\" by Josephine Zerna, Christoph Scheffel, and &lt;YOUR NAME&gt; are available under AGPLv3 (or later) &lt;https://www.gnu.org/licenses/agpl-3.0.html&gt; or (at your option) under CC BY-SA 4.0 &lt;https://creativecommons.org/licenses/by-sa/4.0/&gt;.\n\nThe bibliography (stored in \"Bibliography.bib\") by Florian Kohrt and &lt;YOUR NAME&gt; is available under CC0 1.0 &lt;https://creativecommons.org/publicdomain/zero/1.0/&gt;.\n\nAs the AGPLv3 requires reusers adding the full license text, we recommend to also copy it to the project folder (if not already in there).",
    "crumbs": [
      "Home",
      "Choose a License"
    ]
  },
  {
    "objectID": "choose_license.html#additional-figures",
    "href": "choose_license.html#additional-figures",
    "title": "Choose a License",
    "section": "Additional Figures",
    "text": "Additional Figures\n\n\n\n\n\n\n\n\n\nflowchart TB\n  start(\"We want to choose a&lt;br&gt;license for software,&lt;br&gt;writing, image, audio,&lt;br&gt;or video.\") --\"We adapted a work by&lt;br&gt;others shared under a&lt;br&gt;free/open license.\"--&gt; use_existing_license[\"&lt;em&gt;Use its license&lt;/em&gt;\"]\n  start --\"We created the work&lt;br&gt;entirely by ourselves.\"--&gt; regulation(\"Other regulation&lt;br&gt;(by community or funder)&lt;br&gt;concerning license?\")\n  \n  regulation --\"Exists\"--&gt; follow_existing_norms[\"&lt;em&gt;Follow that&lt;/em&gt;\"]\n  regulation --\"Does not&lt;br&gt;exist\"--&gt; type(\"Work type?\")\n  \n  type --\"Software\"--&gt; code_sa(\"Attribution?&lt;br&gt;Indicate license?&lt;br&gt;Add license text?&lt;br&gt;State changes?&lt;br&gt;Disclose code?&lt;br&gt;Copyleft?\")\n  type --\"Writing, image, audio, video\"--&gt; nocode_cc(\"Attribution?&lt;br&gt;Indicate license?&lt;br&gt;State changes?&lt;br&gt;Anti-DRM?&lt;br&gt;Copyleft?\")\n  \n  code_sa --\"Attribution &&lt;br&gt;Add license text &&lt;br&gt;State changes\"--&gt; apache[\"Apache 2.0\"]\n  code_sa --\"Attribution &&lt;br&gt;Indicate license &&lt;br&gt;Disclose code &&lt;br&gt;Weak copyleft\"--&gt; mpl[\"MPL 2.0\"]\n  code_sa --\"Attribution &&lt;br&gt;Add license text &&lt;br&gt;State changes &&lt;br&gt;Disclose code &&lt;br&gt;Strong copyleft\"--&gt; agpl[\"AGPLv3\"]\n  \n  nocode_cc --\"Neither\"--&gt; cc0[\"CC0 1.0\"]\n  nocode_cc --\"Attribution &&lt;br&gt;Indicate license &&lt;br&gt;State changes &&lt;br&gt;Anti-DRM\"--&gt; cc_by[\"CC BY 4.0\"]\n  nocode_cc --\"Attribution &&lt;br&gt;Indicate license &&lt;br&gt;State changes &&lt;br&gt;Anti-DRM &&lt;br&gt;Copyleft\"--&gt; cc_by_sa[\"CC BY-SA 4.0\"]\n  \n  click apache href \"https://choosealicense.com/licenses/apache-2.0/\"\n  click mpl href \"https://choosealicense.com/licenses/mpl-2.0/\"\n  click agpl href \"https://choosealicense.com/licenses/agpl-3.0/\"\n  click cc0 href \"https://creativecommons.org/publicdomain/zero/1.0/\"\n  click cc_by href \"https://creativecommons.org/licenses/by/4.0/\"\n  click cc_by_sa href \"https://creativecommons.org/licenses/by-sa/4.0/\"\n\n\n\n\n\n\nNote. DRM = digital rights management\n\n\nFigure 2: Advanced License Flowchart for Software, Writing, Images, Audio, and Video\n\n\n\n\n\n\n\n\n\n\n\nflowchart TB\n  start(\"We want to choose a&lt;br&gt;license for data.\") --\"We adapted a database by&lt;br&gt;others shared under a&lt;br&gt;free/open license.\"--&gt; use_existing_license_db[\"&lt;em&gt;Use its license(s)&lt;br&gt;for content and database&lt;/em&gt;\"]\n  start --\"We created a database&lt;br&gt;entirely by ourselves.\"--&gt; regulation(\"Other regulation&lt;br&gt;(by community or funder)&lt;br&gt;concerning license?\")\n  \n  regulation --\"Exists\"--&gt; follow_existing_norms[\"&lt;em&gt;Follow that&lt;/em&gt;\"]\n  regulation --\"Does not&lt;br&gt;exist\"--&gt; existing_license_content(\"Adapting content&lt;br&gt; by others?\")\n  \n  subgraph content[\"&lt;strong&gt;License for content&lt;/strong&gt;\"]\n  existing_license_content --\"No, we created the content&lt;br&gt;entirely by ourselves.\"--&gt; facts(\"Entries are facts&lt;br&gt;(like measurements&lt;br&gt;or metadata)?\")\n  existing_license_content --\"Yes, it was&lt;br&gt;shared under a&lt;br&gt;free/open license.\"--&gt; use_existing_license_content[\"&lt;em&gt;Use that license&lt;/em&gt;\"]\n  facts --\"Yes\"--&gt; cc0_content_metadata[\"CC0 1.0\"]\n  facts --\"No\"--&gt; choose_license[\"&lt;em&gt;Consult flowchart for&lt;br&gt;software, writing,&lt;br&gt;image, audio, and video&lt;/em&gt;\"]\n  end\n  \n  subgraph database[\"&lt;strong&gt;License for database&lt;/strong&gt;\"]\n  choose_license --&gt; switch_license[\"&lt;em&gt;Depending on&lt;br&gt;content license&lt;/em&gt;\"]\n  use_existing_license_content --&gt; switch_license\n  \n  cc0_content_metadata --&gt; cc0_db[\"CC0 1.0\"]\n  switch_license --\"CC0 or&lt;br&gt;non-CC license\"--&gt; sa(\"Attribution?&lt;br&gt;Indicate license?&lt;br&gt;Anti-DRM?&lt;br&gt;Copyleft?\")\n  switch_license --\"CC BY or&lt;br&gt;CC BY-SA\"--&gt; same[\"&lt;em&gt;Same license for DB&lt;/em&gt;\"]\n  \n  sa --\"Neither\"--&gt; cc0_db\n  sa --\"Attribution &&lt;br&gt;Indicate license &&lt;br&gt;Anti-DRM &&lt;br&gt;Copyleft\"--&gt; odbl[\"ODbL 1.0\"]\n  \n  %% the following link is only added to have terminal nodes on the same level\n  sa ~~~ same\n  end\n  \n  click cc0_content_metadata href \"https://creativecommons.org/publicdomain/zero/1.0/\"\n  click cc0_db href \"https://creativecommons.org/publicdomain/zero/1.0/\"\n  click odbl href \"https://opendatacommons.org/licenses/odbl/summary/\"\n\n\n\n\n\n\nNote. DRM = digital rights management\n\n\nFigure 3: Advanced License Flowchart for Data(base)",
    "crumbs": [
      "Home",
      "Choose a License"
    ]
  },
  {
    "objectID": "choose_license.html#footnotes",
    "href": "choose_license.html#footnotes",
    "title": "Choose a License",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nCopyleft licenses even require you to choose the same or a compatible license.↩︎\nOf course, this is only a heuristic and there might be good reasons to deviate from community norms.↩︎\nbecause (among other reasons) they explicitly disclaim any conveyance of patent rights (see Creative Commons, 2024)↩︎\nbecause they often require to display the full text of the license (see Wikipedia contributors, 2025)↩︎\nthat is, a license for writing, image, audio, and video↩︎\nThe exception is when the software is part of the output (see Free Software Foundation, 2024).↩︎\na variant of the AGPLv3 that does not cover software running as a service↩︎\nin Germany: Verwertungsgesellschaft↩︎\nFor licenses that require that modifications are indicated, this is an easy way to comply with them. Also, you do not need to provide your real name.↩︎",
    "crumbs": [
      "Home",
      "Choose a License"
    ]
  },
  {
    "objectID": "code.html",
    "href": "code.html",
    "title": "Add Code",
    "section": "",
    "text": "With the data added to the project folder, you can now analyze them and describe the results. For the purpose of this tutorial, we suggest to conduct a simple analysis that explores whether the bill lengths of penguins vary depending on their sex. You can write your own or use the following example:\n\n\n\n\n\n\nTip 1: Data Analysis Example\n\n\n\n\n\nYou can copy the following code into the results section of the manuscript:\n\n\nManuscript.qmd\n\nDescriptive statistics of the data set are given in @tbl-descriptive-statistics and individual bill lengths are displayed in @fig-bill-length-comparison.\n\n```{r}\n#| label: \"t-test\"\n#| echo: false\n#| output: \"asis\"\n\n# Load penguins data set\ndat &lt;- read.csv(\"data.csv\")\n\n# Remove rows with NA\ndat_clean &lt;- dat[complete.cases(dat), ]\n\n# Treat year as categorical variable\ndat_clean$year &lt;- as.factor(dat_clean$year)\n\n# Perform t-test\nt_test_result &lt;- t.test(\n  bill_length_mm ~ sex,\n  data = dat_clean,\n  var.equal = FALSE,\n  conf.level = 0.95\n)\n\n# Describe results\nreport::report(\n  x = t_test_result,\n  data = dat_clean,\n  rules = \"gignac2016\"\n) |&gt;\n  report::as.report_text(summary = TRUE)\n```\n\n```{r}\n#| label: \"tbl-descriptive-statistics\"\n#| echo: false\n#| tbl-cap: \"Descriptive Statistics\"\n#| apa-twocolumn: true\n\nreport::report_sample(dat_clean, by = \"sex\", total = FALSE) |&gt;\n  knitr::kable()\n```\n\n```{r}\n#| label: \"fig-bill-length-comparison\"\n#| echo: false\n#| fig-cap: \"Scatter Plot of Bill Lengths by Sex With Violin Plot Showing Quartiles\"\n\nggplot2::ggplot(dat_clean, ggplot2::aes(x = sex, y = bill_length_mm, fill = sex), group = sex) +\n  ggplot2::geom_violin(\n    draw_quantiles = c(0.25, 0.5, 0.75),\n    show.legend = FALSE\n  ) +\n  ggplot2::geom_jitter(width = 0.15, show.legend = FALSE) +\n  ggplot2::labs(x = \"Sex\", y = \"Bill length in mm\") +\n  ggplot2::theme_minimal()\n```\n\nThis code uses some new packages, one can use renv to view them:\n\n\nConsole\n\nrenv::status()\n\nThen, install and record them with:\n\n\nConsole\n\nrenv::install()\nrenv::snapshot()\n\n\n\n\nAfter adding the data analysis, render the manuscript again:\n\n\nTerminal\n\nquarto render Manuscript.qmd\n\nThen, make your changes known to Git:\n\n\nTerminal\n\ngit status\ngit add .\ngit commit -m \"Add data analysis\"\n\n\n\n\n\n\n\nWarning 1: Beware of Credentials\n\n\n\nSometimes, a data analysis requires the interaction with online services:\n\nData may be collected from social network sites using their APIs1 or downloaded from a data repository, or\nan analysis may be conducted with the help of AI providers.\n\nIn these cases, make sure that the code you check in to Git does not contain any credentials that are required for accessing these services. Instead, make use of environment variables which are defined in a location that is excluded from version control. When programming with R, you can define them in a file called .Renviron in the root of your project folder:\n\n\n.Renviron\n\nMY_FIRST_KEY=\"your_api_key_here\"\nMY_SECOND_KEY=\"your_api_key_here\"\n\nWhen you start a new session from the project folder, the file is automatically read by R and the environment variables can be accessed using Sys.getenv():\nquery_api(..., api_key = Sys.getenv(\"MY_FIRST_KEY\"))\nMake sure that .Renviron is added to your .gitignore file in order to exclude it from the Git repository. If you already committed a file that contains credentials, you can follow Chacon & Straub (2024).\n\n\n\n\n\n\n\n\nWarning 2: Dealing with Dependencies\n\n\n\nEverything not included in the project folder that is required for running the project is called a dependency. Dependencies are possible breaking points in the future, therefore it’s best to keep them at a minimum. If you cannot avoid taking a dependency, make sure that it’s available to users of your project in the long term. In the following, we will discuss two common examples of dependencies: R packages and downloaded files.\n\n\nR packages that you use in your analysis are an obvious example of dependencies. Their version is recorded by renv, but you also need to ensure that they are available for download. First, identify the source from which you installed your packages:\n\n\nConsole\n\n# First, install {pak} and {sessioninfo}\nrenv::install(c(\n  \"pak\",\n  \"sessioninfo\"\n))\n\n# Which R packages does the project directly depend on?\ndeps &lt;- renv::dependencies()$Package |&gt;\n  unique()\n\n# Which R packages does the project indirectly depend on?\ndeps &lt;- deps |&gt;\n  pak::pkg_deps(dependencies = NA) |&gt;\n  getElement(\"package\")\n\n# Get information about their source\nsessioninfo::package_info(deps)\n\nIf the source column only contains the entries CRAN, RSPM, or Bioconductor, they are already archived. If the source column instead mentions something else (e.g., GitHub), you need to make sure yourself that the package is available to users of your project. You can either archive the package, for example in the Software Heritage archive. Or you store a copy of the package in the project folder – of course, you need to make sure that you are allowed to do so from a copyright perspective and comply with its license.\n\n\n\nIf your code interacts with the internet, for example, to download files, this is another common dependency with the risk of breaking in the future. If possible, store a copy of the downloaded file in your project folder. Alternatively, you can upload it to a permanent repository such as Zenodo (discussed later).",
    "crumbs": [
      "Home",
      "Add Code"
    ]
  },
  {
    "objectID": "code.html#add-data-analysis",
    "href": "code.html#add-data-analysis",
    "title": "Add Code",
    "section": "",
    "text": "With the data added to the project folder, you can now analyze them and describe the results. For the purpose of this tutorial, we suggest to conduct a simple analysis that explores whether the bill lengths of penguins vary depending on their sex. You can write your own or use the following example:\n\n\n\n\n\n\nTip 1: Data Analysis Example\n\n\n\n\n\nYou can copy the following code into the results section of the manuscript:\n\n\nManuscript.qmd\n\nDescriptive statistics of the data set are given in @tbl-descriptive-statistics and individual bill lengths are displayed in @fig-bill-length-comparison.\n\n```{r}\n#| label: \"t-test\"\n#| echo: false\n#| output: \"asis\"\n\n# Load penguins data set\ndat &lt;- read.csv(\"data.csv\")\n\n# Remove rows with NA\ndat_clean &lt;- dat[complete.cases(dat), ]\n\n# Treat year as categorical variable\ndat_clean$year &lt;- as.factor(dat_clean$year)\n\n# Perform t-test\nt_test_result &lt;- t.test(\n  bill_length_mm ~ sex,\n  data = dat_clean,\n  var.equal = FALSE,\n  conf.level = 0.95\n)\n\n# Describe results\nreport::report(\n  x = t_test_result,\n  data = dat_clean,\n  rules = \"gignac2016\"\n) |&gt;\n  report::as.report_text(summary = TRUE)\n```\n\n```{r}\n#| label: \"tbl-descriptive-statistics\"\n#| echo: false\n#| tbl-cap: \"Descriptive Statistics\"\n#| apa-twocolumn: true\n\nreport::report_sample(dat_clean, by = \"sex\", total = FALSE) |&gt;\n  knitr::kable()\n```\n\n```{r}\n#| label: \"fig-bill-length-comparison\"\n#| echo: false\n#| fig-cap: \"Scatter Plot of Bill Lengths by Sex With Violin Plot Showing Quartiles\"\n\nggplot2::ggplot(dat_clean, ggplot2::aes(x = sex, y = bill_length_mm, fill = sex), group = sex) +\n  ggplot2::geom_violin(\n    draw_quantiles = c(0.25, 0.5, 0.75),\n    show.legend = FALSE\n  ) +\n  ggplot2::geom_jitter(width = 0.15, show.legend = FALSE) +\n  ggplot2::labs(x = \"Sex\", y = \"Bill length in mm\") +\n  ggplot2::theme_minimal()\n```\n\nThis code uses some new packages, one can use renv to view them:\n\n\nConsole\n\nrenv::status()\n\nThen, install and record them with:\n\n\nConsole\n\nrenv::install()\nrenv::snapshot()\n\n\n\n\nAfter adding the data analysis, render the manuscript again:\n\n\nTerminal\n\nquarto render Manuscript.qmd\n\nThen, make your changes known to Git:\n\n\nTerminal\n\ngit status\ngit add .\ngit commit -m \"Add data analysis\"\n\n\n\n\n\n\n\nWarning 1: Beware of Credentials\n\n\n\nSometimes, a data analysis requires the interaction with online services:\n\nData may be collected from social network sites using their APIs1 or downloaded from a data repository, or\nan analysis may be conducted with the help of AI providers.\n\nIn these cases, make sure that the code you check in to Git does not contain any credentials that are required for accessing these services. Instead, make use of environment variables which are defined in a location that is excluded from version control. When programming with R, you can define them in a file called .Renviron in the root of your project folder:\n\n\n.Renviron\n\nMY_FIRST_KEY=\"your_api_key_here\"\nMY_SECOND_KEY=\"your_api_key_here\"\n\nWhen you start a new session from the project folder, the file is automatically read by R and the environment variables can be accessed using Sys.getenv():\nquery_api(..., api_key = Sys.getenv(\"MY_FIRST_KEY\"))\nMake sure that .Renviron is added to your .gitignore file in order to exclude it from the Git repository. If you already committed a file that contains credentials, you can follow Chacon & Straub (2024).\n\n\n\n\n\n\n\n\nWarning 2: Dealing with Dependencies\n\n\n\nEverything not included in the project folder that is required for running the project is called a dependency. Dependencies are possible breaking points in the future, therefore it’s best to keep them at a minimum. If you cannot avoid taking a dependency, make sure that it’s available to users of your project in the long term. In the following, we will discuss two common examples of dependencies: R packages and downloaded files.\n\n\nR packages that you use in your analysis are an obvious example of dependencies. Their version is recorded by renv, but you also need to ensure that they are available for download. First, identify the source from which you installed your packages:\n\n\nConsole\n\n# First, install {pak} and {sessioninfo}\nrenv::install(c(\n  \"pak\",\n  \"sessioninfo\"\n))\n\n# Which R packages does the project directly depend on?\ndeps &lt;- renv::dependencies()$Package |&gt;\n  unique()\n\n# Which R packages does the project indirectly depend on?\ndeps &lt;- deps |&gt;\n  pak::pkg_deps(dependencies = NA) |&gt;\n  getElement(\"package\")\n\n# Get information about their source\nsessioninfo::package_info(deps)\n\nIf the source column only contains the entries CRAN, RSPM, or Bioconductor, they are already archived. If the source column instead mentions something else (e.g., GitHub), you need to make sure yourself that the package is available to users of your project. You can either archive the package, for example in the Software Heritage archive. Or you store a copy of the package in the project folder – of course, you need to make sure that you are allowed to do so from a copyright perspective and comply with its license.\n\n\n\nIf your code interacts with the internet, for example, to download files, this is another common dependency with the risk of breaking in the future. If possible, store a copy of the downloaded file in your project folder. Alternatively, you can upload it to a permanent repository such as Zenodo (discussed later).",
    "crumbs": [
      "Home",
      "Add Code"
    ]
  },
  {
    "objectID": "code.html#style-manuscript",
    "href": "code.html#style-manuscript",
    "title": "Add Code",
    "section": "Style Manuscript",
    "text": "Style Manuscript\nTo format manuscripts according to the requirements of a particular journal, multiple Quarto extensions are available. In the following, we will demonstrate the usage of apaquarto, which typesets documents according to the requirements of the American Psychological Association (2020). Of course, you may also use an extension for a different journal.\napaquarto can be installed in the project folder using the following command:\n\n\nTerminal\n\nquarto add wjschne/apaquarto\n\nThis downloads the extension into the folder _extensions of your project.\nThen, change the format in the YAML header of your manuscript as follows:\n\n\nManuscript.qmd\n\nformat:\n  apaquarto-pdf:\n    documentmode: man\n    keep-tex: true\n    pdf-engine: lualatex\n    a4paper: true\n\nYou can now render the manuscript with the new format:\n\n\nTerminal\n\nquarto render Manuscript.qmd\n\n\n\n\n\n\n\nTip 2\n\n\n\nIf the PDF file cannot be created, try updating Quarto. It comes bundled with RStudio, however, apaquarto sometimes requires more recent versions.\n\n\nAgain, make your changes known to Git:\n\n\nTerminal\n\ngit status\ngit add .\ngit commit -m \"Apply custom manuscript style\"",
    "crumbs": [
      "Home",
      "Add Code"
    ]
  },
  {
    "objectID": "code.html#add-code-citation-and-attribution",
    "href": "code.html#add-code-citation-and-attribution",
    "title": "Add Code",
    "section": "Add Code Citation and Attribution",
    "text": "Add Code Citation and Attribution\nAs with data, there are multiple reasons to indicate when using code by others. First, there is software which is actually copied into the own project folder. For example, this is the case for the Quarto extension that you downloaded earlier. These cases matter from a copyright perspective and you need to make sure to have permission for redistribution.\nUnder which license is apaquarto made available?\n\n\n\n\n\n\nTip 3: apaquarto License (Solution)\n\n\n\n\n\nAccording to its GitHub page, apaquarto is licensed under CC0 1.0. This means that it can be used and distributed even without attribution.\n\n\n\nWe recommend adding a short paragraph to LICENSE.txt to describe its license.\n\n\n\n\n\n\nTip 4: Addition to LICENSE.txt (Solution)\n\n\n\n\n\nIt is best to provide attribution even if the license does not require it.\n\n\nLICENSE.txt\n\n\"apaquarto\" stored in \"_extensions/wjschne/apaquarto\" by W. Joel Schneider available from &lt;https://github.com/wjschne/apaquarto&gt; is licensed under CC0 1.0: &lt;https://creativecommons.org/publicdomain/zero/1.0/&gt;\n\nAgain, if the license required adding the full license text, you would also need to copy it to the project folder (if not already in there).\n\n\n\nThen, there is software that is used (e.g., during the data analysis), but not copied into the project folder. Here, questions of copyright due to redistribution do not apply.\nOf course, being transparent about used software for reasons of reproducibility and academic integrity matters in any case. You can consult Figure 1 for general advice whether to cite a particular piece of software or not. As with data, citations should allow for exact identification and access. From the six “software citation principles” by Smith et al. (2016), licensed under CC BY 4.0:\n\n1. Importance: Software should be considered a legitimate and citable product of research. Software citations should be accorded the same importance in the scholarly record as citations of other research products, such as publications and data; they should be included in the metadata of the citing work, for example in the reference list of a journal article, and should not be omitted or separated. Software should be cited on the same basis as any other research product such as a paper or a book, that is, authors should cite the appropriate set of software products just as they cite the appropriate set of papers.\n5. Accessibility: Software citations should facilitate access to the software itself and to its associated metadata, documentation, data, and other materials necessary for both humans and machines to make informed use of the referenced software.\n6. Specificity: Software citations should facilitate identification of, and access to, the specific version of software that was used. Software identification should be as specific as necessary, such as using version numbers, revision numbers, or variants such as platforms.\n\nIn practice, you would identify all pieces of software the project relies on. A few of them are obvious, such as R itself, Quarto, and the \\(\\TeX\\) distribution we installed before. Then there are the individual R packages,2 Quarto extensions, and \\(\\TeX\\) packages. All of them, in turn, may have dependencies and it is up to you decide when not to dig deeper. For example, some R packages are only thin wrappers around other R packages or around system dependencies which also might deserve credit. A system dependency is additional software that you require on your computer apart from the R package.\n\n\n\n\n\n\n\n\nflowchart TB\n  asks_for_citation(\"Does the software&lt;br&gt;ask you to cite it?\")\n  critical_or_unique_contribution(\"Did the software&lt;br&gt;play a critical part&lt;br&gt;in or contributed&lt;br&gt;something unique&lt;br&gt;to your research?\")\n  manipulate(\"Did the software&lt;br&gt;manipulate or create&lt;br&gt;your data, software,&lt;br&gt;or other outputs?\")\n  relies_on_credit(\"Do the authors of&lt;br&gt;the software rely&lt;br&gt;on academic credit&lt;br&gt;for funding?\")\n  cite[Cite!]\n  nocite[Don't cite!]\n\n  asks_for_citation --\"Yes\"--&gt; cite\n  asks_for_citation --\"No\"--&gt; critical_or_unique_contribution\n  critical_or_unique_contribution --\"Yes\"--&gt; cite\n  critical_or_unique_contribution --\"No\"--&gt; manipulate\n  manipulate --\"Yes\"--&gt; cite\n  manipulate --\"No\"--&gt; relies_on_credit\n  relies_on_credit --\"Yes\"--&gt; cite\n  relies_on_credit --\"No\"--&gt; nocite\n\n\n\n\n\n\n\n\nFigure 1: “Should I cite the software?” by Brown et al. (2016) licensed under CC BY-SA 4.0. Simplified from original.\n\n\n\nNow, add references for the software you would like to cite to the manuscript. In the following, we will demonstrate this for R and all R packages by using the R package grateful. For arbitrary software, you can use CiteAs or the DOI Citation Formatter to create appropriate citations.\nAdd the following code chunk to the end of the discussion in the manuscript:\n\n\nManuscript.qmd\n\n```{r}\n#| echo: false\n\ngrateful::cite_packages(\n    output = \"paragraph\",\n    out.dir = \".\",\n    omit = NULL,\n    dependencies = TRUE,\n    passive.voice = TRUE,\n    bib.file = \"grateful-refs\"\n)\n```\n\nThis will automatically create a paragraph citing all used packages and generate the bibliography file grateful-refs.bib.3 Then, in the YAML header, add grateful-refs.bib by setting the bibliography as follows:\n\n\nManuscript.qmd\n\nbibliography:\n  - Bibliography.bib\n  - grateful-refs.bib\n\nUse renv to view, install, and record the newly used package:\n\n\nConsole\n\nrenv::status()\nrenv::install()\nrenv::snapshot()\n\nFinally, render the document again and commit the changes:\n\n\nTerminal\n\nquarto render Manuscript.qmd\n\ngit status\ngit add .\ngit commit -m \"Add software citation\"",
    "crumbs": [
      "Home",
      "Add Code"
    ]
  },
  {
    "objectID": "code.html#coding-best-practices",
    "href": "code.html#coding-best-practices",
    "title": "Add Code",
    "section": "Coding Best Practices",
    "text": "Coding Best Practices\nAlthough we provide you with example code in this tutorial, a few things remain to be said about best practices when it comes to writing code that is readable and maintainable.\n\nUse project-relative paths. When you refer to a file within your project folder, write paths relative to the root (the uppermost folder in your project). For example, don’t write C:/Users/Public/Documents/my_project/images/result.png, instead write images/result.png.\nKeep it simple. Add complexity only when you must. Whenever there’s a boring way to do something and a clever way, go for the boring way. If the code grows increasingly complex, refactor it into separate functions and files.\nDon’t repeat yourself. Use variables and functions before you start to write (or copy-paste) the same thing twice.\nUse comments to explain why you do things. The code already shows what you do. Use comments to summarize it and explain why you do it.\nDon’t reinvent the wheel. With R, chances are that what you need to do is greatly facilitated by a package from one of many high-quality collections such as rOpenSci, r-lib, Tidyverse, or fastverse.\nThink twice about your dependencies. Every dependency increases the risk of irreproducibility in the future. Prefer packages that are well-maintained and light on dependencies.4 We also recommend you to read “When should you take a dependency?” by Wickham & Bryan (2023).\nFail early, often, and noisily. Whenever you expect a certain state, use assertions to be sure. In R, you can use stopifnot() to make sure that a condition is actually true.\nTest your code. Test your code with scenarios where you know what the result should be. Turn bugs you discovered into test cases. Use linting tools5 to identify common mistakes in your code, for example, the R package lintr.\nRead through a style guide and follow it. A style guide is a set of stylistic conventions that improve the code quality. R users are recommended to read Wickham’s (2022) “Tidyverse style guide” and use the R package styler. Python users may benefit from reading the “Style Guide for Python Code” by Rossum et al. (2013). And even if you don’t follow a style guide, be consistent.\n\nThis is only a brief summary and there is much more to be learned about coding practices. If you want to dive deeper we recommend the following resources:\n\n“Tidy design principles” (Wickham, 2023)\n“The Good Research Code Handbook” (Mineault & Nozawa, 2021)\n“Quality assurance of code for analysis and research” (UK Government Analytical Community, 2020)\n“The Art of UNIX Programming” (Raymond, 2003)\n\n\n“Any fool can write code that a computer can understand. Good programmers write code that humans can understand.”\n— Fowler et al. (1999), p. 15",
    "crumbs": [
      "Home",
      "Add Code"
    ]
  },
  {
    "objectID": "code.html#the-last-mile",
    "href": "code.html#the-last-mile",
    "title": "Add Code",
    "section": "The Last Mile",
    "text": "The Last Mile\nrenv only records the versions of R packages and of R itself. This means that everything we have not decided to cite or attribute is not documented anywhere. We will cover system dependencies when creating a README. For now, however, there is one simple step you can take to record the version of Quarto (and a few other dependencies). Do run the following:\n\n\nTerminal\n\nquarto use binder\n\nThis will create a few additional files which facilitate reconstructing the computational environment in the future.6 As always, commit your changes:\n\n\nTerminal\n\ngit status\ngit add .\ngit commit -m \"Add repo2docker config\"",
    "crumbs": [
      "Home",
      "Add Code"
    ]
  },
  {
    "objectID": "code.html#footnotes",
    "href": "code.html#footnotes",
    "title": "Add Code",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAn application programming interface provides the capability to interact with other software using a programming language.↩︎\nBy default, renv avoids copying them into the project folder. And even that happens (e.g., by using renv::isolate()) they are excluded from Git by default.↩︎\nNote that this automatic detection can miss packages in some circumstances, therefore always verify the rendered result.↩︎\nYou can use the function pak::pkg_deps() to count the total number of package dependencies in R.↩︎\nA linting tool analyzes your code without actually running it. Therefore, this process is also called static code analysis.↩︎\nEither using repo2docker or the public binder service.↩︎",
    "crumbs": [
      "Home",
      "Add Code"
    ]
  },
  {
    "objectID": "CONTRIBUTING.html",
    "href": "CONTRIBUTING.html",
    "title": "Contributing Notes",
    "section": "",
    "text": "Contributing Notes\nThere are some things to consider when contributing to this repo:\n\nmake screenshots in high resolution by temporarily increasing the font scaling factor in your OS and using a large display\nlimit the width of images and center them, for example, as follows:\n![](images/my_image.png){width=500px fig-align=\"center\"}\nannotate code blocks with filename=\"Terminal\" andfilename=\"Console\" to differentiate Bash and R that should be entered by the user (if there is no file from which the code is an excerpt)\nPut optional content into a collapsed note\nPut important content into warning\nhierarchy of callouts\n\nnote\ntip\ncaution\nwarning\nimportant\n\nheadings (including tabset tabs and callout titles) are written in Title Case\non any page, start headings at level 2 (i.e., use ##) and above because the page title is already at level 1\nmaintain the hierarchy of headings, that is, only create headings at level n if there’s already a heading at level n-1\nalso maintain the hierarchy of headings for callouts: callouts use heading levels that are one below the current heading level\nR package names are typeset in monospace\nPrefer R packages that follow the tinyverse philosophy, that is, have a lightweight dependency footprint. All packages need to be downloaded by renv and (worst case) compiled during the tutorial, which better not take too long. Use pak::pkg_deps() to count the total number of package dependencies.\nWrite license abbreviations with no-break spaces (e.g., write CC\\ BY\\ 4.0 rather than CC BY 4.0)\nWhen writing markdown:\n\nuse semantic linefeeds to ease change tracking, except for exact quotes (as they won’t be updated) and for example code in code blocks (to allow for wrapping on the website as required by the user’s device)\nuse regular footnotes rather than inline footnotes to increase the readability of markdown (except for short notes or at the end of lines)\nuse reference links rather than inline links to increase the readability of markdown (except for short links or at the end of a line)\n\nIf the (R package/system) dependencies that are required to work through the tutorial change, make sure to adjust the respective section in make_readme.qmd accordingly.\nWhen making significant contributions, add people to the CITATION.cff file and mention them in about.qmd.\nkeep usage of terms consistent, for example:\n\nalways write data dictionary or always write codebook (but don’t mix)\n\nin the case of this tutorial, the convention is to write data dictionary\n\nalways write data set or always write dataset (but don’t mix)\n\nin the case of this tutorial, the convention is to write data set"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Code Publishing Tutorial",
    "section": "",
    "text": "This tutorial covers how to make your code and material available to others. It wraps up a series of tutorials which we recommend to go through in advance:\n\nIntroduction to version control with git and GitHub within RStudio: This tutorial explains how to set up a simple project with version control.\nCollaborative coding with GitHub and RStudio: Here you can learn how to collaborate with others on code projects using GitHub.\nIntroduction to R: This is an introduction to the R programming language.\nIntroduction to renv: Here you can learn how to manage the dependencies of an R project.\nIntroduction to Quarto: Learn how to combine prose and code to make documents more reproducible.\nIntroduction to Zotero: Get introduced to the reference management software Zotero.\nFAIR research data management: Learn how to make your data findable, accessible, interoperable, and reusable.\n\nWhile the general principles taught in this tutorial apply to most researchers publishing code, we will focus on the programming language R and the publishing system Quarto.\nTo follow the tutorial you need to have installed Git, R, and Quarto. Windows users may additionally need RTools. Some things will be explained using the RStudio IDE, but you are free to use any IDE you like.\n\n\n\n\n\n\nNote 1: Alternatives to Quarto\n\n\n\n\n\nQuarto is a tool to render dynamic documents, but not the only one.\nIt is the successor of the R package rmarkdown and mostly backwards-compatible. rmarkdown continues to be supported, but the development of new features happens in Quarto. The main difference is that Quarto has first-class support for Python. In other words, Python users of Quarto do not need to have R installed.\nWhile this tutorial focuses on Quarto, you can also create reproducible research projects with the following tools:\n\nJupyter Book\nStencila\nCurvenote\nshowyourwork!\nOrg Mode\nStatTag\n\n\n\n\nWe will start with creating a simple report which incorporates R code. Then, we will focus on what is required to publish your work:\n\nremoving legal barriers: adding an appropriate license\nhigh-level documentation: creating a README file\narchival: uploading it to a repository\n\nGet started"
  },
  {
    "objectID": "in_depth_material/introduction_copyright.html",
    "href": "in_depth_material/introduction_copyright.html",
    "title": "Introduction to Copyright and Licensing",
    "section": "",
    "text": "Note: This is an expanded version of the Chapter “Sharing work of others: Copyright”, where you find more details on the choice of licenses.\nBy default, everything you put into the project folder will be shared publicly. In many instances, this will also include works by others than yourself or your co-authors, because you may use existing data, images or software. In these cases, you should make sure to only share them to the extent you are allowed to. In the following, we will be focusing on copyright, but of course, there can also be other restrictions.",
    "crumbs": [
      "Home",
      "💡 In-depth material",
      "Introduction to Copyright and Licensing"
    ]
  },
  {
    "objectID": "in_depth_material/introduction_copyright.html#introduction-to-copyright-and-licenses",
    "href": "in_depth_material/introduction_copyright.html#introduction-to-copyright-and-licenses",
    "title": "Introduction to Copyright and Licensing",
    "section": "Introduction to Copyright and Licenses",
    "text": "Introduction to Copyright and Licenses\nWhenever authors create a literary or artistic work (such as a text, image, video, or software), the copyright law1 in most countries limits other people from copying, modifying, and sharing it without the author’s express permission. This even applies if the author makes it available to others (e.g., on their website): First and foremost others are not allowed to copy, modify, or share it. Importantly, this legal default of “all rights reserved” was created to benefit publishers, not authors (Fogel, 2006), and runs counter to many cultural and scientific processes. Copyright licenses enable authors to free up their works for reuse by others.\nNote that copyright law varies between countries and the rule of territoriality (lex loci protectionis) applies: Applicable are the laws of the country where a work is used. Also, if the work was created as part of the author’s job, it might be their employer who holds the copyright to the work, depending on the country and contract.\nA license is a legal document that regulates what other people than the author can and cannot do with a copyright-protected work, and under which conditions. The license may be exclusive, such that it is only granted to one recipient, effectively limiting the author in dealing with their own work. It can also be non-exclusive, thus giving rights to others without the author losing them. To avoid that every author who would like to share their work writes their own license, pre-formulated “boilerplate” licenses have been created. For example, you might have heard about “Creative Commons” licenses, which are used by Wikipedia. Recognizing them facilitates both sharing (on the side of the author) and re-using (on the side of the recipient).2\n\n\nFor the purpose of this tutorial, by license we mean copyright license.\nAn important class of boilerplate licenses are free/open licenses. Put simply, works under a free/open license “can be freely studied, applied, copied and/or modified, by anyone, for any purpose” (Möller et al., 2015). Importantly, this also means that others do not need to ask or notify the author and that they can use it for commercial purposes. Coming back to the example of Creative Commons licenses, not all of them are free/open. For example, some restrict commercial use and modification. The Creative Commons license “Attribution-ShareAlike 4.0” is an example of a free/open license, however, and we will cover several others below.\nBy the choice of license, authors can demand that they are credited, that the original license is indicated, that modifications are indicated, that derivative works are only shared under the same license, and that no further restrictions are imposed on the work. Software licenses may additionally require to make the source code available to everybody the software is shared with and often require to display the full text of the license upon distribution.\n\n\n\n\n\n\nNote 2: A Note on Terminology\n\n\n\n\n\nThe terms free and open, especially with regard to software, come with a history. The Free Software Foundation (FSF) was founded in 1985 to protect “four essential freedoms” (2024) of a program’s user. These are the freedoms to use, study, share, and improve a program. Software whose users legally and practically have these freedoms (because, among other things, they have access to its source code) is considered free. The four freedoms are seen as vital for a society as a whole in the sense that they enable sharing, cooperation and ultimately freedom in general. The FSF maintains a list of software licenses that it considers to be protecting the four freedoms. Sometimes the term libre (Spanish and French for free) is used to make a distinction from gratis software. You can learn more about free software at Write Free Software.\nThe Open Source Initiative (OSI), which was founded in 1998, follows a more pragmatic approach. It is concerned with developing high-quality software, for which everyone’s ability to obtain, modify and contribute back the source code is considered beneficial. Access to the source code is one out of multiple conditions for software to be considered open source by the OSI (2007), which equally maintains a list of approved licenses.\nAccess to the source code is a necessary, but not sufficient requirement both for free software and for open source software. Conversely, both can (and frequently are) sold for money, as their respective criteria only apply once one has access to the software. Throughout this tutorial, we write “free/open license” to mean a license that is approved by either the FSF or the OSI. Software which is neither but makes available its source code is sometimes referred to as source-available software.\nApart from software, the term open access has often been used for works that are available at no cost. For example, this is the commonality of bronze, green, hybrid, gold, and diamond/platinum open access articles, which otherwise vary in the rights that are granted to readers. In 2002, the Budapest Open Access Initiative declared that open access additionally includes the right to use articles for any purpose, and in 2003, the Bethesda Statement and the Berlin Declaration added the right to make derivative works.\nTwo other notable definitions include the Open Definition (Open Knowledge Foundation, 2016), which was first drafted in 2005, and the definition of Free Cultural Works (Möller et al., 2015), for which the open editing phase began in 2006. They are largely viewed as compatible with one another.\n\n\n\n\n\n\n\nCan I Share That Work?\nTo determine whether a particular work can be included in the project folder and shared publicly, the first step is to search for its license. For example, this tutorial has an about page detailing its licensing, whereas other websites sometimes state the license in the footer. Other places to look include a project’s README file or a dedicated LICENSE or COPYING file. If a project has been stored in a research repository, yet another means of communicating its copyright status might exist. For media from Wikimedia Commons, an Attribution Generator exists.\n\n\n\n\n\n\nTip 1: Consider Complicated Licensing Situations\n\n\n\nFor works by one or only few authors, it is possible that one license consistently applies to the whole content. More often than not, however, the situation is a little more complicated:\n\nDifferent parts of a work may be available under different licenses: A document may incorporate direct quotes or images by others. In this case, the license of the document may not cover those. In the best case, the authors indicate which parts of the work are covered by which license.\nA work may be available under different licenses at the choice of the (re-)user. This is also called multi-licensing. For example, authors might allow to use a work under any version of a license.\nIn contrast, it may also be the case that one has to comply with the conditions of multiple licenses at the same time. This is the case, for example, if a derivative work is published under a different license than the original work.\n\n\n\n\nPublic domain\nIf you cannot find any license, the work might be in the public domain3 depending on national law. For example, the work may not cross the threshold of originality, it may not qualify for copyright protection – such as official works by the government –, or the copyright protection might have expired. According to the Berne convention, copyright expires at earliest 50 years after the author’s death, but in many countries it expires even later – you can use a public domain calculator to check. If no license notice is present and the work is not in the public domain, it is in copyright and you are generally not allowed to share it with others. You can, however, ask the author to put the corresponding work under a free/open license – Wikimedia Commons provides an email template to obtain such a permission. Without permission you can check your national laws for limitations and exceptions to copyright.4 Examples include the right to quote, trivial use, and the US-American fair use.\nHaving found a license, you need to determine (1) whether it is a standard (boilerplate) license, (2) whether it is a free/open, and (3) whether it is appropriate for the particular type of work and use case.\n\nStandard licenses are usually stated by their name (or an abbreviation), which may include a version number. Most standard licenses were assigned an SPDX identifier for unambiguous identification, though the identifier is often not indicated for a particular work (which would be best practice). Also, not all standard licenses have SPDX identifiers. You can view a list of all licenses with SPDX identifiers here.\nFree/open: We have compiled lists of the most common free/open licenses below, categorized by the type of work they apply to. Be sure to look for an exact match, as there are often many licenses with very similar names. If a particular license is not listed below, we also provide links to other resources which you can use to determine whether a license is free/open.\nType of work and use case: Many licenses were written with a particular type of work in mind, along with a certain use case. Software licenses, for example, may consider that the source code is the preferred form for making modifications and that software can be encumbered by patents, while licenses for data can differentiate between the database and any works produced from it. Take caution if a license applies to a type work for which it was not originally created and conflicts with your use case. Sometimes, the license name hints at the intended type of work, but when in doubt always read the full license text (and/or consult with a lawyer) to determine whether the conditions are acceptable to you.\n\n\nSoftwareWriting, Images, Audio, VideoData\n\n\nFor a software license to be considered free/open, it must be approved by either the Open Source Initiative (OSI) or the Free Software Foundation (FSF). Some of the most common free/open software licenses are listed below:\n\n\n\n\nGNU Affero General Public License v3.0 (AGPL-3.0)\n\nMajor conditions when sharing works:\n\nAttribution\nAdd license text\nState changes\nDisclose code\nStrong copyleft\n\nLink to full text\n\n\n\nGNU General Public License v3.0 (GPL-3.0)\n\nMajor conditions when sharing works:\n\nAttribution\nAdd license text\nState changes\nDisclose code\nStrong copyleft\n\nLink to full text\n\n\n\nGNU Lesser General Public License v3.0 (LGPL-3.0)\n\nMajor conditions when sharing works:\n\nAttribution\nAdd license text\nState changes\nDisclose code\nWeak copyleft\n\nLink to full text\n\n\n\nApache License 2.0 (Apache-2.0)\n\nMajor conditions when sharing works:\n\nAttribution\nAdd license text\nState changes\n\nLink to full text\n\n\n\nMozilla Public License 2.0 (MPL-2.0)\n\nMajor conditions when sharing works:\n\nAttribution\nIndicate license\nDisclose code\nWeak copyleft\n\nLink to full text\n\n\n\nMIT License (MIT)\n\nMajor conditions when sharing works:\n\nAttribution\nAdd license text\n\nLink to full text\n\n\n\nBSD 3-Clause “New” or “Revised” License (BSD-3-Clause)\n\nMajor conditions when sharing works:\n\nAttribution\nAdd license text\n\nLink to full text\n\n\n\nBSD 2-Clause “Simplified” License (BSD-2-Clause)\n\nMajor conditions when sharing works:\n\nAttribution\nAdd license text\n\nLink to full text\n\n\n\nIf you did not find a particular software license in this list and consult the resources by the OSI and/or FSF linked above, be cautious because they also approve special-purpose licenses that are unfit for software in the general case. For example, the license CC0 1.0 expressively does not grant patent rights and one should only use software under that license if it is most likely not covered by patents.\n\n\nMany authors of text and media put their work under a license created by Creative Commons. Not all Creative Commons licenses are free/open, however, as some of them prohibit commercial use or the distribution of modified works (such as sharing a translated version). Therefore, we recommend to only use works made available to you under CC0 or under Creative Commons licenses with the modules “Attribution” (BY) or “ShareAlike” (SA), but without the modules “NonCommercial” (NC) and “NoDerivatives” (ND). In their most recent version this includes the following licenses:\n\n\n\n\nCC0 1.0 (CC0-1.0)\n\nMajor conditions when sharing works: (none)\nLink to full text\n\n\n\nCreative Commons Attribution 4.0 (CC-BY-4.0)\n\nMajor conditions when sharing works:\n\nAttribution\nIndicate license\nState changes\nAnti-DRM\n\nLink to full text\n\n\n\nCreative Commons Attribution-ShareAlike 4.0 (CC-BY-SA-4.0)\n\nMajor conditions when sharing works:\n\nAttribution\nIndicate license\nState changes\nAnti-DRM\nCopyleft\n\nLink to full text\n\n\n\nOf course, if you encounter a Creative Commons license with a previous version that satisfies the description above, it can be also considered free/open. If you encounter a license not from Creative Commons and want to determine whether it is free/open, you can consult the lists of licenses accepted at Wikimedia Commons. Note, however, that some of the licenses there might be inappropriate for text and media. For example, licenses for software or for documentation commonly require to distribute a work together with the full license text, which is impractical for usage in print media.\n\n\nPurely factual data such as measurements are usually not copyrightable, but literary or artistic works that cross the threshold of originality are. Additionally, in some jurisdictions, collections of data (i.e., databases) can be subject to sui generis database rights which prevent extracting substantial parts of a database.\nAs a consequence, a database may be licensed differently than its content. For example, with a database of artworks, the artworks may be licensed individually as chosen by the artists, but the license for the database as a whole might have been chosen by the curator, including the selection of entries, field names and any sui generis database rights. Watch out for any signs that the license for the database and its content are not the same. In the following, we list some popular free/open data licenses:\n\n\n\n\nCC0 1.0 (CC0-1.0)\n\nMajor conditions when sharing works: (none)\nLink to full text\n\n\n\nCreative Commons Attribution 4.0 (CC-BY-4.0)\n\nMajor conditions when sharing works:\n\nAttribution\nIndicate license\nState changes\nAnti-DRM\n\nLink to full text\n\n\n\nCreative Commons Attribution-ShareAlike 4.0 (CC-BY-SA-4.0)\n\nMajor conditions when sharing works:\n\nAttribution\nIndicate license\nState changes\nAnti-DRM\nCopyleft\n\nLink to full text\n\n\n\nNote that Creative Commons licenses prior to version 4.0 are not suitable for databases. You might also encounter the following, less popular free/open data licenses:\n\n\n\n\nOpen Data Commons Public Domain Dedication & License 1.0 (PDDL-1.0)\n\nMajor conditions when sharing works: (none)\nLink to full text\n\n\n\nCommunity Data License Agreement Permissive 2.0 (CDLA-Permissive-2.0)\n\nMajor conditions when sharing works:\n\nAdd license text\n\nLink to full text\n\n\n\nCommunity Data License Agreement Permissive 1.0 (CDLA-Permissive-1.0)\n\nMajor conditions when sharing works:\n\nAttribution\nIndicate license\n\nLink to full text\n\n\n\nCommunity Data License Agreement Sharing 1.0 (CDLA-Sharing-1.0)\n\nMajor conditions when sharing works:\n\nAttribution\nIndicate license\nState changes\nCopyleft\n\nLink to full text\n\n\n\nFinally, you should know about the following two free/open licenses because they only cover the database, but not its individual contents or the works produced from it. If any of these licenses is used, the license for the content must be stated separately.\n\n\n\n\nOpen Data Commons Open Database License v1.0 (ODbL-1.0)\n\nMajor conditions when sharing works:\n\nAttribution\nIndicate license\nAnti-DRM\nCopyleft\n\nLink to full text\n\n\n\nOpen Data Commons Attribution License v1.0 (ODC-By-1.0)\n\nMajor conditions when sharing works:\n\nAttribution\nIndicate license\n\nLink to full text\n\n\n\nIf you encounter a license not listed here and want to determine whether it is free/open, you can consult the lists of licenses accepted at Wikimedia Commons. Note, however, that some of the licenses there might be inappropriate for data, because they do not mention sui generis database rights.\n\n\n\n\n\n\n\n\n\nCaution 1: License Versions Are Important\n\n\n\nYou may have noticed that in many cases a version number is part of the license name. This is because the organizations that created the licenses sometimes publish updated versions to accommodate for developments in copyright law and the communities that use the licenses. For example, the Creative Commons licenses (that start with CC) were first published in 2002. Since then, the possibility to relicense under later (v2.0, 2004) and compatible licenses (v3.0, 2007) has been added, a 30-day window to correct license violations has been established to combat copyleft trolls, and sui generis database rights have been covered explicitly (v4.0, 2013). There are many more subtle differences between license versions, therefore it is important to indicate which license version exactly one is referring to, as the license of a work does not “update” automatically (i.e., you have to follow the terms of that exact version). CC0, officially introduced in 2009, is still at version 1.0.\nFor the GNU licenses it is even recommended to state whether a work is licensed only under the indicated version of the license or, alternatively, also under newer versions of the license (Stallman, 2022).\n\n\n\n\n\nUnder Which Conditions?\nFinally, if you verified that the work has been made available to you under a free/open license, you need to understand the conditions under which you are allowed to include the work in your project folder and share it with others – regardless of whether you modified it. In the following, we will explain the most important conditions of the licenses listed above. For other licenses we recommend reading their text in full and/or consulting with a lawyer. The conditions of many popular free/open licenses are also summarized on ChooseALicense.com, which you can use to get a general idea of a license (but which does not obviate reading the license text in full). Specifically for software licenses the Open Source Automation Development Lab provides useful checklists detailing the respective obligations.5\n\n\n\n\n\n\nNote 3: Private Use\n\n\n\nIn the following, we only discuss the conditions under which works may be shared. This is because free/open licenses put no conditions on private use, where the work is not made available to others.\n\n\n\nAttribution\nLicenses may require that you provide attribution to the author(s)6 and to retain any copyright notices,7 although the specifics vary between licenses. For example, Creative Commons licenses other than CC0 require that the name of the author, the title of the work, and a link to the work are provided.\nProjects with many authors often explicitly allow for an attribution to the collective as a whole rather than being mentioned individually. For example, the flexible attribution requirements of Creative Commons licenses allow that Wikipedia authors agree to be attributed through a link to the article (Linksvayer, 2009). And software projects may use copyright notices that only contain the project name, such as Copyright (c) 2020-2025 The XYZ Project Contributors (Winslow, 2020).\nWhere to put the attribution depends on the type of the work, but in general it is best to keep it close to where the work is used and to provide all required information. Only linking to a page that provides the attribution (as with Wikipedia articles) most likely will not suffice in general.\n\n\nState Changes\nIf a work has been modified, licenses may require that this is indicated. For example, if an image under a Creative Commons license other than CC0 is reused in a cropped version, reusers could add “adapted from original” to indicate that changes have occurred.\n\n\nIndicate License / Add License Text\nLicenses may either require that one mentions the applicable license by name and possibly link (“Indicate license”) or they even require to copy the full license text along with the used work (“Add license text”). Of course, the latter may not be feasible if the work is printed and smaller than the license text. For example, if the license of an image requires to print the full license text, the image mostly cannot be used in newspapers (see Wikipedia contributors, 2025).\n\n\nDisclose Code\nThere are various situations in which one interacts with software without having access to the underlying source code. For example, software can be distributed as a binary (“executable”) file or it can be used over the internet. In both cases, licenses may require that the source code is provided to its users.\n\n\nAnti-DRM\nYou may have encountered images or videos which you could not download due to a copy protection. Such a protection is also called digital rights management (DRM). For works published under a license with an anti-DRM clause, reusers may not apply DRM to the work or must provide a DRM-free version in parallel (depending on the exact license).\n\n\nCopyleft\nIf you modified the work and put a sufficient amount of creativity into it, the result is called a derivative work. It is (again) protected by copyright and even if you share it, nobody except you is allowed to copy, modify, or distribute it further. You can put it under a free/open license but don’t have to.8 The only exception is if the original work has been made available under a “copyleft” license. In that case, if you share the work with others you must put it under the same license as the original work9 – or you commit a copyright violation.10 This explains the origin of the term copyleft, as it “turns copyright around” to make works permanently free: © → 🄯. In the realm of Creative Commons licenses, copyleft is also called share alike. The opposite of a copyleft license is sometimes also called a permissive license.\nWhat is considered creation of a derivative work varies between jurisdictions, but the following are typical examples: translating a text into a different language, taking a picture of an artwork, adding a song to a video, adapting a computer program to fit own use cases, or taking a screenshot of a computer program. In all of these cases, if the original work is under a copyleft license, then sharing of the resulting derivative work is only allowed if it is put under the same license.\nThe question is then: Which uses of a work do not create a derivative work? In many cases, if an unaltered excerpt “is used to illuminate an idea or provide an example in another larger work” (Creative Commons, 2024a) no derivative work is made. The excerpt needs to “remain separate and distinct in the new context” (Kreutzer, 2024, p. 44) and not be “merged with other material into a new and larger work” (Kreutzer, 2024, p. 45). For example, embedding images in a document and clearly separating them from the rest or assembling works as part of a collection typically would not create a derivative work. However, due to a lack of case law, there is only little guidance on what constitutes a derivative work in general.\nAlso note that the copyleft licenses we discuss here do not mandate sharing. Copyleft (and attribution) clauses are only triggered if the work is shared (Creative Commons, 2015). This means that if you only use a work internally, you do not need to share your derivative works.\n\n\n\n\n\n\nNote 4: Weak and Strong Copyleft\n\n\n\n\n\nFor software, copyleft licenses come in two flavors:\n\nWeak copyleft licenses only require that modifications to the software itself are licensed under the same or a compatible license if shared. For example, if you create and publish software under a weak copyleft license, others who modify it and put their version on the internet have to apply the same license. However, people who merely use your software in their own work which they make publicly available can choose any license for it.\nStrong copyleft licenses, on the other side, insist that any larger works that use the copyleft-licensed software must also be licensed under the same or a compatible license if shared. For example, if your software were to be put under a strong copyleft license, everybody publishing software that uses your software would need to put it under the same license. Because of only few rulings in courts, the extent of this requirement is disputed (Wikipedia contributors, 2024).\n\n\n\n\n\n\n\nFurther Remarks\nThe description of the conditions above is a simplified summary – read the full text of the license before sharing the respective work with others. For example, Creative Commons licenses other than CC0 also require that\n\nyou retain a notice about the disclaimer of warranties,\nyou retain an indication of any previous modifications,\nthe attribution does not imply endorsement by the original author, and\nyou remove the attribution again upon request by the original author.\n\n\n\n\n\n\n\nTip 2: Required Information under Creative Commons Licenses\n\n\n\nFor most Creative Commons licenses, providing the following information is required (if available):\n\nAuthor name\nCopyright notice\nTitle of the work\n\nLink to the work\n\nLicense name\n\nLink to the license\n\nLink to warranty disclaimer\nIndicate modification\n\n\n\nObviously, if you are in doubt whether a condition of the license applies in your use case, it is better to either follow it or to ask the author for clarification or explicit permission. This is especially important given the existence of copyleft trolls: People who distribute works under a free/open license but send out statutory damages claims after minor violations without providing reusers an opportunity to fix their error. In addition, in many European countries attribution may be necessary regardless due to the author’s moral rights. For these reasons, we recommend that you provide attribution for all works under a free/open license – even if the license does not strictly require it (e.g., CC0). Also, you should take note of every foreign work included in your project folder and record its license.\n\n\n\n\n\n\nImportant 1: Non-copyright Restrictions\n\n\n\nThe free/open licenses we discuss here mostly grant copyrights (with some of them explicitly granting patent rights and sui generis database rights). Therefore, you may lack other rights such as personality, privacy, moral, or trademark rights. For example, sharing photos that depict people is not only a matter of copyright, but also of privacy rights. Also, their commercial use may require the consent of the depicted person. Finally, note that even if attribution is not a requirement of the license, good scientific practice demands that appropriate citations are made.",
    "crumbs": [
      "Home",
      "💡 In-depth material",
      "Introduction to Copyright and Licensing"
    ]
  },
  {
    "objectID": "in_depth_material/introduction_copyright.html#wrap-up",
    "href": "in_depth_material/introduction_copyright.html#wrap-up",
    "title": "Introduction to Copyright and Licensing",
    "section": "Wrap-up",
    "text": "Wrap-up\nIf you would like to learn more about copyright and licenses you might find the following resources interesting:\n\n“Open Content – A Practical Guide to Using Creative Commons Licences” by Kreutzer (2024)\n“Creative Commons Certificate for Educators, Academic Librarians, and Open Culture” by Creative Commons (2024b)\n“Freie Software – Zwischen Privat- und Gemeineigentum” by Grassmuck (2004)\n“Rechtsfragen bei Open Science: Ein Leitfaden” by Kreutzer & Lahmann (2021)",
    "crumbs": [
      "Home",
      "💡 In-depth material",
      "Introduction to Copyright and Licensing"
    ]
  },
  {
    "objectID": "in_depth_material/introduction_copyright.html#footnotes",
    "href": "in_depth_material/introduction_copyright.html#footnotes",
    "title": "Introduction to Copyright and Licensing",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nin Germany: Urheberrecht↩︎\nIn fact, authors should not create their own license texts if the purpose is to share their work freely and openly with others. By using a boilerplate license others know what to expect, also because it may have already been tested in courts.↩︎\nin Germany: Gemeinfreiheit↩︎\nin Germany: Schranken des Urheberrechts↩︎\nAccessing the checklists requires a (free) account on their website.↩︎\nor others whose names are provided with the original work↩︎\nSuch as Copyright (c) 2025 Jane Doe↩︎\nOf course, you still need to abide by the license conditions of the original work, such as attribution.↩︎\nor sometimes also under a later version or under a compatible license↩︎\nNote, however, that copyleft licenses are not automatic: A derivative work of a copylefted work is not “implicitly” under the same license – others would commit a copyright violation if they just took it. Only if the derivative author explicitly makes it available under the same license, others may use the derivative work under the same terms.↩︎",
    "crumbs": [
      "Home",
      "💡 In-depth material",
      "Introduction to Copyright and Licensing"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This tutorial was created by Florian Kohrt. It is based on previous work by Josephine Zerna and Christoph Scheffel. Comments on earlier versions were kindly provided by Malika Ihle, Florian Pargent, Jonas Hagenberg, Felix Schönbrodt, and Sarah von Grebmer zu Wolfsthurn. Felix Schönbrodt created this short version of the longer original tutorial."
  },
  {
    "objectID": "about.html#utilized-software",
    "href": "about.html#utilized-software",
    "title": "About",
    "section": "Utilized Software",
    "text": "Utilized Software\n\n\nThis work was completed with the following R packages: datawizard v. 0.12.3 (Patil et al., 2022), grateful v. 0.2.4 (Francisco Rodriguez-Sanchez & Connor P. Jackson, 2023), palmerpenguins v. 0.1.1 (Horst et al., 2020), quarto v. 1.4.4 (Allaire & Dervieux, 2024), renv v. 1.0.7 (Ushey & Wickham, 2024), rmarkdown v. 2.28 (Allaire et al., 2024; Xie et al., 2018, 2020), sessioninfo v. 1.2.2 (Wickham et al., 2021), withr v. 3.0.1 (Hester et al., 2024).\n\n\nQuarto 1.7.32 was utilized to render the files.\n\nsessioninfo::session_info()\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       Ubuntu 24.04.2 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  C.UTF-8\n ctype    C.UTF-8\n tz       UTC\n date     2025-07-15\n pandoc   3.6.3 @ /opt/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P cli           3.6.5   2025-04-23 [?] RSPM (R 4.4.0)\n P digest        0.6.37  2024-08-19 [?] RSPM (R 4.4.0)\n P evaluate      1.0.4   2025-06-18 [?] RSPM (R 4.4.0)\n P fastmap       1.2.0   2024-05-15 [?] RSPM (R 4.4.0)\n P grateful      0.2.4   2023-10-22 [?] RSPM (R 4.4.0)\n P htmltools     0.5.8.1 2024-04-04 [?] RSPM (R 4.4.0)\n P jsonlite      2.0.0   2025-03-27 [?] RSPM (R 4.4.0)\n P knitr         1.50    2025-03-16 [?] RSPM (R 4.4.0)\n P later         1.3.2   2023-12-06 [?] RSPM (R 4.4.0)\n P processx      3.8.6   2025-02-21 [?] RSPM (R 4.4.0)\n P ps            1.9.1   2025-04-12 [?] RSPM (R 4.4.0)\n P quarto      * 1.4.4   2024-07-20 [?] RSPM (R 4.4.0)\n P Rcpp          1.0.13  2024-07-17 [?] RSPM (R 4.4.0)\n   renv          1.0.7   2024-04-11 [1] RSPM (R 4.4.1)\n P rlang         1.1.6   2025-04-11 [?] RSPM (R 4.4.0)\n P rmarkdown     2.28    2024-08-17 [?] RSPM (R 4.4.0)\n P rstudioapi    0.16.0  2024-03-24 [?] RSPM (R 4.4.0)\n P sessioninfo   1.2.2   2021-12-06 [?] RSPM (R 4.4.0)\n P withr         3.0.1   2024-07-31 [?] RSPM (R 4.4.0)\n P xfun          0.52    2025-04-02 [?] RSPM (R 4.4.0)\n P yaml          2.3.10  2024-07-26 [?] RSPM (R 4.4.0)\n\n [1] /home/runner/work/code-publishing-short/code-publishing-short/renv/library/linux-ubuntu-noble/R-4.4/x86_64-pc-linux-gnu\n [2] /home/runner/.cache/R/renv/sandbox/linux-ubuntu-noble/R-4.4/x86_64-pc-linux-gnu/22bdb599\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "about.html#license-and-disclaimer",
    "href": "about.html#license-and-disclaimer",
    "title": "About",
    "section": "License and Disclaimer",
    "text": "License and Disclaimer\nNone of the discussion in this tutorial constitutes legal advice.\nExcept where noted otherwise, the narrative text in this tutorial is licensed under CC BY-SA 4.0; the code without any narrative text is also (at your option) available under CC0 1.0.\nThe files Manuscript.qmd and Bibliography.bib are made available by Josephine Zerna and Christoph Scheffel under CC0 1.0.\nThe screenshots of the RStudio IDE are Copyright (C) 2024 Posit PBC and are available under the GNU Affero General Public License v3. The source code is available on GitHub."
  },
  {
    "objectID": "about.html#funding",
    "href": "about.html#funding",
    "title": "About",
    "section": "Funding",
    "text": "Funding\n\n\n\nThis work was partly funded by the Berkeley Initiative for Transparency in the Social Sciences (BITSS), managed by the Center for Effective Global Action (CEGA)."
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "Add Data",
    "section": "",
    "text": "You can now download the data set we have prepared for you and put it into your project folder:\ndata.csv\n\n\n\n\n\npalmerpenguins: Palmer Archipelago (Antarctica) Penguin Data\n\n\nThe data set is from the package palmerpenguins (v0.1.1) and contains the recorded bill lengths and sex of penguins living on three islands in the Palmer Archipelago, Antarctica. It was made available by Allison Horst, Alison Hill, and Kristen Gorman under the license CC0 1.0.\n\n\n\n\n\n\nImportant 1: Consider Legal Restrictions Before Sharing\n\n\n\nEverything you put into the project folder will be shared publicly. For reasons of reproducibility, this should include the data you analyze. Of course, you should only share them to the extent you are allowed to. Besides copyright and similar rights, you need to take into account applicable privacy laws (e.g., the GDPR for European citizens) and contractual obligations (e.g., with your data provider).\nPrivacy laws and contractual obligations may require you to create an anonymized or synthetic data set1, in which case you should provide a reference to a repository where the originally measured data can be obtained from. For further information, you can watch the talk “Data anonymity” by Felix Schönbrodt recorded during the LMU Open Science Center Summer School 2023 and have a look at the accompanying slides. Another resource to look at is the presentation “Creating reproducible packages when data are confidential” by Vilhuber (2024).",
    "crumbs": [
      "Home",
      "Add Data"
    ]
  },
  {
    "objectID": "data.html#add-data-file",
    "href": "data.html#add-data-file",
    "title": "Add Data",
    "section": "",
    "text": "You can now download the data set we have prepared for you and put it into your project folder:\ndata.csv\n\n\n\n\n\npalmerpenguins: Palmer Archipelago (Antarctica) Penguin Data\n\n\nThe data set is from the package palmerpenguins (v0.1.1) and contains the recorded bill lengths and sex of penguins living on three islands in the Palmer Archipelago, Antarctica. It was made available by Allison Horst, Alison Hill, and Kristen Gorman under the license CC0 1.0.\n\n\n\n\n\n\nImportant 1: Consider Legal Restrictions Before Sharing\n\n\n\nEverything you put into the project folder will be shared publicly. For reasons of reproducibility, this should include the data you analyze. Of course, you should only share them to the extent you are allowed to. Besides copyright and similar rights, you need to take into account applicable privacy laws (e.g., the GDPR for European citizens) and contractual obligations (e.g., with your data provider).\nPrivacy laws and contractual obligations may require you to create an anonymized or synthetic data set1, in which case you should provide a reference to a repository where the originally measured data can be obtained from. For further information, you can watch the talk “Data anonymity” by Felix Schönbrodt recorded during the LMU Open Science Center Summer School 2023 and have a look at the accompanying slides. Another resource to look at is the presentation “Creating reproducible packages when data are confidential” by Vilhuber (2024).",
    "crumbs": [
      "Home",
      "Add Data"
    ]
  },
  {
    "objectID": "data.html#add-data-dictionary",
    "href": "data.html#add-data-dictionary",
    "title": "Add Data",
    "section": "Add Data Dictionary",
    "text": "Add Data Dictionary\nWhether or not distributing the data set, it is important to document the meaning (e.g., units) and values of its variables. This is typically done with a data dictionary (also called a codebook). In the following, we will demonstrate how to create a simple data dictionary using the R package datawizard. You can install them now using:\n\n\nConsole\n\nrenv::install(\"datawizard\")\n\nYou can put the code that follows in a separate document. Create it by clicking on File &gt; New File &gt; Quarto Document…. Choose a title such as Data Dictionary, select HTML as format, uncheck the use of the visual markdown editor, and click on Create. Remove everything except the YAML header (between the ---). To make the HTML file self-contained, also set embed-resources: true such that the YAML header looks as follows:\n\n\ndata_dictionary.qmd\n\n---\ntitle: \"Data Dictionary\"\nformat:\n  html:\n    embed-resources: true\n---\n\nThen, save it as data_dictionary.qmd by clicking on File &gt; Save.\nTo create the actual data dictionary, first write a description for all columns so others can understand what the variable names mean. Where necessary, also document their value – this is especially important if their meaning is non-obvious. In the following, we demonstrate this by storing the penguins’ binomial name along with the English name.\n\n\n\ndata_dictionary.qmd\n\n```{r}\n#| echo: false\n\n# Store the description of variables\nvars &lt;- c(\n  species = \"a character string denoting penguin species\",\n  island = \"a character string denoting island in Palmer Archipelago, Antarctica\",\n  bill_length_mm = \"a number denoting bill length (millimeters)\",\n  bill_depth_mm = \"a number denoting bill depth (millimeters)\",\n  flipper_length_mm = \"an integer denoting flipper length (millimeters)\",\n  body_mass_g = \"an integer denoting body mass (grams)\",\n  sex = \"a character string denoting penguin sex\",\n  year = \"an integer denoting the study year\"\n)\n\n# Store the description of variable values\nvals &lt;- list(\n  species = c(\n    Adelie = \"Pygoscelis adeliae\",\n    Gentoo = \"Pygoscelis papua\",\n    Chinstrap = \"Pygoscelis antarcticus\"\n  )\n)\n```\n\n\nThen, load the data and use datawizard to add the descriptions to the data.frame:2\n\n\n\n\n\ndatawizard: Easy Data Wrangling and Statistical Transformations\n\n\n\n\n\ndata_dictionary.qmd\n\n```{r}\n#| echo: false\n\ndat &lt;- read.csv(\"data.csv\")\n\nfor (x in names(vars)) {\n  if (x %in% names(vals)) {\n    dat &lt;- datawizard::assign_labels(\n      dat,\n      select = I(x),\n      variable = vars[[x]],\n      values = vals[[x]]\n    )\n  } else {\n    dat &lt;- datawizard::assign_labels(\n      dat,\n      select = I(x),\n      variable = vars[[x]]\n    )\n  }\n}\n```\n\n\nThen, you can create the data dictionary containing the descriptions, but also some other information about each variable (e.g., the number of missing values) and print it.\n\n\n\ndata_dictionary.qmd\n\n```{r}\n#| echo: false\n#| column: \"body-outset\"\n#| classes: plain\n\ndatawizard::data_codebook(dat) |&gt;\n  datawizard::data_select(exclude = ID) |&gt;\n  datawizard::data_filter(N != \"\") |&gt;\n  datawizard::print_md()\n```\n\n\n\n\n\ndat (344 rows and 8 variables, 8 shown)\n\n\n\n\n\n\n\n\n\n\n\nName\nLabel\nType\nMissings\nValues\nValue Labels\nN\n\n\n\n\nspecies\na character string denoting penguin species\ncharacter\n0 (0.0%)\nAdelie\nPygoscelis adeliae\n152 (44.2%)\n\n\n\n\n\n\nChinstrap\nPygoscelis antarcticus\n68 (19.8%)\n\n\n\n\n\n\nGentoo\nPygoscelis papua\n124 (36.0%)\n\n\nisland\na character string denoting island in Palmer Archipelago, Antarctica\ncharacter\n0 (0.0%)\nBiscoe\n\n168 (48.8%)\n\n\n\n\n\n\nDream\n\n124 (36.0%)\n\n\n\n\n\n\nTorgersen\n\n52 (15.1%)\n\n\nbill_length_mm\na number denoting bill length (millimeters)\nnumeric\n2 (0.6%)\n[32.1, 59.6]\n\n342\n\n\nbill_depth_mm\na number denoting bill depth (millimeters)\nnumeric\n2 (0.6%)\n[13.1, 21.5]\n\n342\n\n\nflipper_length_mm\nan integer denoting flipper length (millimeters)\ninteger\n2 (0.6%)\n[172, 231]\n\n342\n\n\nbody_mass_g\nan integer denoting body mass (grams)\ninteger\n2 (0.6%)\n[2700, 6300]\n\n342\n\n\nsex\na character string denoting penguin sex\ncharacter\n11 (3.2%)\nfemale\n\n165 (49.5%)\n\n\n\n\n\n\nmale\n\n168 (50.5%)\n\n\nyear\nan integer denoting the study year\ninteger\n0 (0.0%)\n2007\n\n110 (32.0%)\n\n\n\n\n\n\n2008\n\n114 (33.1%)\n\n\n\n\n\n\n2009\n\n120 (34.9%)\n\n\n\n\n\nDepending on the type of data, it may also be necessary to describe sampling procedures (e.g., selection criteria), measurement instruments (e.g., questionnaires), appropriate weighting, already applied preprocessing steps, or contact information. In our case, as the data has already been published, we only store a reference to its source.\nThe data set is from the R package palmerpenguins. If you had it installed you could use the function citation() to create such a reference:\n\ncitation(\"palmerpenguins\", auto = TRUE) |&gt;\n  format(bibtex = FALSE, style = \"text\")\n\nWithout the package palmerpenguins installed, you can find a suggested citation on its website and add that to your data dictionary:\n\n\n\n\ndata_dictionary.qmd\n\nHorst A, Hill A, Gorman K (2022). _palmerpenguins: Palmer Archipelago (Antarctica) Penguin Data_. R package version 0.1.1, https://github.com/allisonhorst/palmerpenguins, &lt;https://allisonhorst.github.io/palmerpenguins/&gt;.\n\n\n\nFinally, you can render the data dictionary by running the following:\n\n\nTerminal\n\nquarto render data_dictionary.qmd\n\nThis should create the file data_dictionary.html which you open and view in your web browser.\nOne could go even further by making the information machine-readable in a standardized way. We provide an optional example of that in Note 1. If you want to learn more about the sharing of research data, have a look at the tutorial “FAIR research data management”.\n\n\n\n\n\n\nNote 1: Create Machine-Readable Variable Documentation\n\n\n\n\n\nThis example demonstrates how the title and description of the data set, the description of the variables and their valid values are stored in a machine-readable way. We’ll reuse the descriptions we already created3 and add a few others.\nFirst, store the title and description of the data set as a whole:\n\n\nConsole\n\ntable_info &lt;- c(\n  title = \"penguins data set\",\n  description = \"Size measurements for adult foraging penguins near Palmer Station, Antarctica\"\n)\n\nAs before, also provide a reference to the source.\n\n\n\n\nConsole\n\ndat_source &lt;- \"https://allisonhorst.github.io/palmerpenguins/\"\n\n\n\nNext, create a list of the categorical variables’ valid values:\n\n\nConsole\n\nvalid_vals &lt;- list(\n  species = c(\"Adelie\", \"Gentoo\", \"Chinstrap\"),\n  island = c(\"Torgersen\", \"Biscoe\", \"Dream\"),\n  sex = c(\"male\", \"female\"),\n  year = c(2007, 2008, 2009)\n)\n\nFinally, store the descriptions of the variables we already created earlier:\n\n\nConsole\n\n# Store the description of variables\nvars &lt;- c(\n  species = \"a character string denoting penguin species\",\n  island = \"a character string denoting island in Palmer Archipelago, Antarctica\",\n  bill_length_mm = \"a number denoting bill length (millimeters)\",\n  bill_depth_mm = \"a number denoting bill depth (millimeters)\",\n  flipper_length_mm = \"an integer denoting flipper length (millimeters)\",\n  body_mass_g = \"an integer denoting body mass (grams)\",\n  sex = \"a character string denoting penguin sex\",\n  year = \"an integer denoting the study year\"\n)\n\nGenerally, metadata are either stored embedded into the data or externally, for example, in a separate file. We will use the “frictionless data” standard, where metadata are stored separately. Another alternative would be RO-Crate.\nSpecifically, one can use the R package frictionless to create a schema which describes the structure of the data.4 For the purpose of the following code, it is just a nested list that we edit to include our own information. We also explicitly record in the schema that missing values are stored in the data file as NA and that the data are licensed under CC0 1.0. Finally, the package is used to create a metadata file that contains the schema.\n\n\nConsole\n\n# Install {frictionless} and the required dependency {stringi}\nrenv::install(c(\n  \"frictionless\",\n  \"stringi\"\n))\n\n# Read data and create schema\ndat_filename &lt;- \"data.csv\"\ndat &lt;- read.csv(dat_filename)\ndat_schema &lt;- frictionless::create_schema(dat)\n\n# Add descriptions to the fields\ndat_schema$fields &lt;- lapply(dat_schema$fields, \\(x) {\n  c(x, description = vars[[x$name]])\n})\n\n# Record valid values\ndat_schema$fields &lt;- lapply(dat_schema$fields, \\(x) {\n  if (x[[\"name\"]] %in% names(valid_vals)) {\n    modifyList(x, list(constraints = list(enum = valid_vals[[x$name]])))\n  } else {\n    x\n  }\n})\n\n# Define missing values\ndat_schema$missingValues &lt;- c(\"\", \"NA\")\n\n# Create package with license info and write it\ndat_package &lt;- frictionless::create_package() |&gt;\n  frictionless::add_resource(\n    resource_name = \"penguins\",\n    data = dat_filename,\n    schema = dat_schema,\n    title = table_info[[\"title\"]],\n    description = table_info[[\"description\"]],\n    licenses = list(list(\n      name = \"CC0-1.0\",\n      path = \"https://creativecommons.org/publicdomain/zero/1.0/\",\n      title = \"CC0 1.0 Universal\"\n    )),\n    sources = list(list(\n      title = \"CRAN\",\n      path = dat_source\n    ))\n  )\nfrictionless::write_package(dat_package, directory = \".\")\n\nThis creates the metadata file datapackage.json in the current directory. Make sure it is located in the same folder as data.csv, as together they comprise a data package.\n\n\n\nHaving added the data and its documentation, one can view and record the utilized packages with renv, thus bringing the project into a consistent state:\n\n\nConsole\n\nrenv::status()\nrenv::snapshot()",
    "crumbs": [
      "Home",
      "Add Data"
    ]
  },
  {
    "objectID": "data.html#add-data-citation-and-attribution",
    "href": "data.html#add-data-citation-and-attribution",
    "title": "Add Data",
    "section": "Add Data Citation and Attribution",
    "text": "Add Data Citation and Attribution\nAll data relied upon should be cited in the manuscript to allow for precise identification and access. From the “eight core principles of data citation” by Starr et al. (2015), licensed under CC0 1.0:\n\nPrinciple 1 – Importance: “Data should be considered legitimate, citable products of research. Data citations should be accorded the same importance in the scholarly record as citations of other research objects, such as publications.”\nPrinciple 3 – Evidence: “In scholarly literature, whenever and wherever a claim relies upon data, the corresponding data should be cited.”\nPrinciple 5 – Access: “Data citations should facilitate access to the data themselves and to such associated metadata, documentation, code, and other materials, as are necessary for both humans and machines to make informed use of the referenced data.”\nPrinciple 7 – Specificity and Verifiability: “Data citations should facilitate identification of, access to, and verification of the specific data that support a claim. Citations or citation metadata should include information about provenance and fixity sufficient to facilitate verifying that the specific time slice, version and/or granular portion of data retrieved subsequently is the same as was originally cited.”\n\nNow, it’s your turn to add an appropriate citation for the data set to the manuscript. Does your citation adhere to the principles above?\n\n\n\n\n\n\nTip 1: Citing the Data Set (Solution)\n\n\n\n\n\nYou can find an appropriate BibTeX entry on the package website or with the function citation():5\n\ncitation(\"palmerpenguins\", auto = TRUE) |&gt;\n  transform(key = \"horst2020\") |&gt;\n  toBibtex()\n\n\n\nBibliography.bib\n\n@Manual{horst2020,\n  title = {palmerpenguins: Palmer Archipelago (Antarctica) Penguin Data},\n  author = {Allison Horst and Alison Hill and Kristen Gorman},\n  year = {2022},\n  note = {R package version 0.1.1, \nhttps://github.com/allisonhorst/palmerpenguins},\n  url = {https://allisonhorst.github.io/palmerpenguins/},\n}\n\n\n\nCopy the BibTeX entry to the file Bibliography.bib. Then, find the line in the manuscript that says “cite data here” and replace it with a sentence such as the following:\n\n\nManuscript.qmd\n\nThe analyzed data are by @horst2020.\n\nRender the document to check that the citation is displayed properly.\n\n\nTerminal\n\nquarto render Manuscript.qmd\n\n\n\n\nWhile citation happens in the manuscript for reasons of academic integrity and reproducibility, to comply with any licenses you also may need to provide attribution within your project folder. Even though the data file we use here does not require attribution, we recommend adding a short paragraph to LICENSE.txt:\n\n\n\n\nLICENSE.txt\n\nThe penguins data stored in \"data.csv\" by Allison Horst, Alison Hill, and Kristen Gorman available from &lt;https://allisonhorst.github.io/palmerpenguins/&gt; are licensed under CC0 1.0: &lt;https://creativecommons.org/publicdomain/zero/1.0/&gt;\n\n\n\nAs before, if the license required adding the full license text, you would also need to copy it to the project folder (if not already in there).\nFinally, you can go through the commit routine:\n\n\nTerminal\n\ngit status\ngit add .\ngit commit -m \"Add data\"",
    "crumbs": [
      "Home",
      "Add Data"
    ]
  },
  {
    "objectID": "data.html#footnotes",
    "href": "data.html#footnotes",
    "title": "Add Data",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nFor example, using Amnesia, ARX, sdcTools, Synthpop, or OpenDP.↩︎\nNote that the code provided does not alter the data file – no description will be added to data.csv. The descriptions are only added to a (temporary) copy of the data set within R to create the data dictionary.↩︎\nUnfortunately, the descriptions of values are not reused in this example, as they are not supported by the specification we are using.↩︎\nIn June 2024, version 2 of the frictionless data standard has been released. As of November 2024, the R package frictionless only supports the first version, though support for v2 is planned.↩︎\nNote that this function requires to have the respective package installed.↩︎",
    "crumbs": [
      "Home",
      "Add Data"
    ]
  },
  {
    "objectID": "archive.html",
    "href": "archive.html",
    "title": "Archive Your Project",
    "section": "",
    "text": "The project folder is now ready to be deposited for long-term archival. When considering an appropriate repository, there are a few questions to ponder (excerpt from Jackson & The Software Sustainability Institute, 2018b, with footnotes removed, licensed under CC BY 4.0):\n\nDoes the digital repository give you a unique persistent digital identifier for your deposit?\nPersistent digital identifiers are identifiers that are provided under the assumption that they, and the digital objects they refer to, will remain available long term. Examples of unique persistent digital identifiers include DOIs and ARKs. The use of persistent digital identifiers for research outputs, including papers, data and software, and the use of these for citation purposes, is becoming prevalent in research.\nCan the digital repository accommodate the size of your deposit?\nDigital repositories may have constraints on the size of deposits they accept. For example, Zenodo has a limit of 50 GB and the University of Edinburgh DataShare has a limit of 20 GB for deposits done via a browser and 100 GB otherwise.\nHas your funder or publisher recommended or mandated a digital repository to use?\nIf both a funder and publisher mandate two different digital repositories you could deposit within them both, or discuss with each to see if they will agree for you to use one only, even if it is not the one they mandate.\nAre the policies of the digital repository acceptable to you?\nThese can include terms and conditions of use; availability of the service (e.g. does the service regularly go down for updates or does it run 24/7); how resilient the service is to breakdowns; where deposits are stored; how they are stored; what are the plans for stored deposits if the repository goes out of business; how secure the storage is; how regularly it is backed up; how long backups are kept for; and what disaster recovery plans are in place. Knowing the quality of service can help you judge whether your deposit will be available to others, and yourself, even in the face of disaster. It also allows you, and your institution, to develop contingency plans should such drastic circumstances arise.\nIs the longevity of the digital repository acceptable to you?\nYou want to know that the digital repository will host your deposit for as long as you need it too, not just 6 months or so. The policies or terms and conditions of the digital repository should state this. For example, Zenodo states that their lifetime is currently 20 years and figshare guarantees 10 years of persistent availability.\nIs the digital repository free or do you have to pay a fee? If there is a fee, is this a one-off payment and can you afford it?\nIf a digital repository expects a one-off payment, to subsidise its hosting, you may be able to pay for this out of your project budget or your institution may pay this for you. It is recommended that you avoid any digital repository that expects a regular fee for the duration for which they hold the deposit, since it would most likely be unsustainable for your institution to commit to ever-increasing fees over a long term. There are many free digital repositories available.\nIs the digital repository accredited or certified?\nThe digital repository may be accredited or certified by an independent agency that reviews digital repositories according to various criteria related to its policies and processes. The presence of an accreditation or certification may provide you with an additional degree of confidence that the digital repository meets your requirements. For example, the Data Seal of Approval can be awarded to digital repositories who satisfy a set of quality guidelines relating to how they manage, preserve and make available the deposits they hold. The presence of a Data Seal of Approval could give you additional confidence that a digital repository is suitable for holding your deposit.\n\nAdditional guidance is provided by d’Aquin et al. (2023), Garijo et al. (2022), and Science Europe (2021). You can use the registry of research data repositories re3data.org to find one that matches your criteria. We think that the Software Heritage code archive and Zenodo are good choices, but don’t forget to also check your local institutions for recommendations. Note that the Open Science Framework (OSF) is not recommended because it allows the deletion of files and projects after their publication.",
    "crumbs": [
      "Home",
      "Archive Your Project"
    ]
  },
  {
    "objectID": "archive.html#where-to-deposit-software",
    "href": "archive.html#where-to-deposit-software",
    "title": "Archive Your Project",
    "section": "",
    "text": "The project folder is now ready to be deposited for long-term archival. When considering an appropriate repository, there are a few questions to ponder (excerpt from Jackson & The Software Sustainability Institute, 2018b, with footnotes removed, licensed under CC BY 4.0):\n\nDoes the digital repository give you a unique persistent digital identifier for your deposit?\nPersistent digital identifiers are identifiers that are provided under the assumption that they, and the digital objects they refer to, will remain available long term. Examples of unique persistent digital identifiers include DOIs and ARKs. The use of persistent digital identifiers for research outputs, including papers, data and software, and the use of these for citation purposes, is becoming prevalent in research.\nCan the digital repository accommodate the size of your deposit?\nDigital repositories may have constraints on the size of deposits they accept. For example, Zenodo has a limit of 50 GB and the University of Edinburgh DataShare has a limit of 20 GB for deposits done via a browser and 100 GB otherwise.\nHas your funder or publisher recommended or mandated a digital repository to use?\nIf both a funder and publisher mandate two different digital repositories you could deposit within them both, or discuss with each to see if they will agree for you to use one only, even if it is not the one they mandate.\nAre the policies of the digital repository acceptable to you?\nThese can include terms and conditions of use; availability of the service (e.g. does the service regularly go down for updates or does it run 24/7); how resilient the service is to breakdowns; where deposits are stored; how they are stored; what are the plans for stored deposits if the repository goes out of business; how secure the storage is; how regularly it is backed up; how long backups are kept for; and what disaster recovery plans are in place. Knowing the quality of service can help you judge whether your deposit will be available to others, and yourself, even in the face of disaster. It also allows you, and your institution, to develop contingency plans should such drastic circumstances arise.\nIs the longevity of the digital repository acceptable to you?\nYou want to know that the digital repository will host your deposit for as long as you need it too, not just 6 months or so. The policies or terms and conditions of the digital repository should state this. For example, Zenodo states that their lifetime is currently 20 years and figshare guarantees 10 years of persistent availability.\nIs the digital repository free or do you have to pay a fee? If there is a fee, is this a one-off payment and can you afford it?\nIf a digital repository expects a one-off payment, to subsidise its hosting, you may be able to pay for this out of your project budget or your institution may pay this for you. It is recommended that you avoid any digital repository that expects a regular fee for the duration for which they hold the deposit, since it would most likely be unsustainable for your institution to commit to ever-increasing fees over a long term. There are many free digital repositories available.\nIs the digital repository accredited or certified?\nThe digital repository may be accredited or certified by an independent agency that reviews digital repositories according to various criteria related to its policies and processes. The presence of an accreditation or certification may provide you with an additional degree of confidence that the digital repository meets your requirements. For example, the Data Seal of Approval can be awarded to digital repositories who satisfy a set of quality guidelines relating to how they manage, preserve and make available the deposits they hold. The presence of a Data Seal of Approval could give you additional confidence that a digital repository is suitable for holding your deposit.\n\nAdditional guidance is provided by d’Aquin et al. (2023), Garijo et al. (2022), and Science Europe (2021). You can use the registry of research data repositories re3data.org to find one that matches your criteria. We think that the Software Heritage code archive and Zenodo are good choices, but don’t forget to also check your local institutions for recommendations. Note that the Open Science Framework (OSF) is not recommended because it allows the deletion of files and projects after their publication.",
    "crumbs": [
      "Home",
      "Archive Your Project"
    ]
  },
  {
    "objectID": "archive.html#using-zenodo-to-archive-your-project-folder",
    "href": "archive.html#using-zenodo-to-archive-your-project-folder",
    "title": "Archive Your Project",
    "section": "Using Zenodo to Archive Your Project Folder",
    "text": "Using Zenodo to Archive Your Project Folder\nIn the following we will demonstrate how to use Zenodo to archive one’s project folder and obtain a DOI.\n\n\n\n\n\n\nCaution 1: Zenodo Sandbox\n\n\n\nNote that during this tutorial, we will be using Zenodo’s sandbox instance located at sandbox.zenodo.org in order to learn how to use it while not wasting Zenodo’s resources. For real projects, use the production instance at zenodo.org, which requires a separate account.\n\n\nFirst, create an account on the Zenodo Sandbox by clicking on Sign up in the upper right corner and submitting the provided form. Then, confirm your email address (also check your spam folder if you cannot find the confirmation email).\nNow you can follow the guide “Create new upload”, taking into account the following notes specific to each step:\n\nAdd/remove files: To circumvent the file limit on Zenodo, you can bundle your project folder in one ZIP file and upload that instead. Be sure to exclude all files mentioned in your .gitignore file!\nFill in metadata\n\nDigital Object Identifier (DOI): Usually, you will want a DOI, therefore you need to choose No for the question whether you already have a DOI for this upload, and click on Get a DOI now!.\nResource type: Select the most appropriate one, for example, Publication / Preprint.\nLicenses: If your project folder only contains content by you and if you previously only chose one license, you can select that by choosing Add standard. Otherwise, click on Add custom and describe how each file is licensed. If you have been using REUSE to record license information, you can run enter SPDX Document as title and run the reuse tool with reuse spdx -o reuse.spdx to create the file reuse.spdx. Then you can paste the content of reuse.spdx into the description field of the custom license as it contains information about the license of each file.\n\n\nIf you previously uploaded your project folder to a public Git repository (which we didn’t cover during this tutorial), you could also add the new DOI to your README, for example, under the section “Citation”.",
    "crumbs": [
      "Home",
      "Archive Your Project"
    ]
  },
  {
    "objectID": "archive.html#final-remarks",
    "href": "archive.html#final-remarks",
    "title": "Archive Your Project",
    "section": "Final Remarks",
    "text": "Final Remarks\nThere are situations in which you are not allowed to share your data publicly. In this case, consider using a repository specifically for research data, which later grants access for valid uses individually.\nFor further information, you may be interested in “Software Deposit Guidance for Researchers” (Jackson & The Software Sustainability Institute, 2018a).",
    "crumbs": [
      "Home",
      "Archive Your Project"
    ]
  },
  {
    "objectID": "make_readme.html",
    "href": "make_readme.html",
    "title": "Make a README",
    "section": "",
    "text": "Having settled on a license, it is time to add a final touch. Imagine returning to your project in five years, having forgotten most of the details of what you did exactly. What would be useful to know in order to quickly understand what is going on in the project? This is what needs to be described in the README. While you could just start writing along, it is helpful to provide at least the following information in sections on their own.\n\n\nHow is the project called? What is it about? Which files does the project folder contain? How are they organized?\n\n\n\nAre any (empirical) data involved (e.g., being analyzed or used as input)? From which sources can they be obtained? Are they already included in the project folder? Where is their data dictionary located? Which terms, usage restrictions, or licenses apply? If they are not publicly available, is an alternative, synthesized version provided?\n\n\n\nWhat software needs to be installed to run the analysis – in other words, what are its dependencies? This also includes software that you have used for any manual steps. For every dependency, describe where it can be obtained from. If the code has particular hardware requirements (e.g., in terms of processor or memory), these should be also noted. Finally, for steps that take more than a couple of seconds, the approximate runtime should be indicated.\nNote 1 provides more information on determining the dependencies of an R project.\n\n\n\nHow can one run the project – is there a master script or a particular order in which any scripts need to be executed? Provide detailed instructions for running the full project.\n\n\n\nFor every result (i.e., number, figure, or table) that is computed in the project and displayed in the manuscript, indicate where exactly it is computed.\n\n\n\nIs there a recommended way to cite this project? Is there a published article associated with it that you would like to have cited?\n\n\n\nUnder which licenses are the works in this project folder available?",
    "crumbs": [
      "Home",
      "Make a README"
    ]
  },
  {
    "objectID": "make_readme.html#what-does-a-readme-contain",
    "href": "make_readme.html#what-does-a-readme-contain",
    "title": "Make a README",
    "section": "",
    "text": "Having settled on a license, it is time to add a final touch. Imagine returning to your project in five years, having forgotten most of the details of what you did exactly. What would be useful to know in order to quickly understand what is going on in the project? This is what needs to be described in the README. While you could just start writing along, it is helpful to provide at least the following information in sections on their own.\n\n\nHow is the project called? What is it about? Which files does the project folder contain? How are they organized?\n\n\n\nAre any (empirical) data involved (e.g., being analyzed or used as input)? From which sources can they be obtained? Are they already included in the project folder? Where is their data dictionary located? Which terms, usage restrictions, or licenses apply? If they are not publicly available, is an alternative, synthesized version provided?\n\n\n\nWhat software needs to be installed to run the analysis – in other words, what are its dependencies? This also includes software that you have used for any manual steps. For every dependency, describe where it can be obtained from. If the code has particular hardware requirements (e.g., in terms of processor or memory), these should be also noted. Finally, for steps that take more than a couple of seconds, the approximate runtime should be indicated.\nNote 1 provides more information on determining the dependencies of an R project.\n\n\n\nHow can one run the project – is there a master script or a particular order in which any scripts need to be executed? Provide detailed instructions for running the full project.\n\n\n\nFor every result (i.e., number, figure, or table) that is computed in the project and displayed in the manuscript, indicate where exactly it is computed.\n\n\n\nIs there a recommended way to cite this project? Is there a published article associated with it that you would like to have cited?\n\n\n\nUnder which licenses are the works in this project folder available?",
    "crumbs": [
      "Home",
      "Make a README"
    ]
  },
  {
    "objectID": "make_readme.html#create-it",
    "href": "make_readme.html#create-it",
    "title": "Make a README",
    "section": "Create It!",
    "text": "Create It!\nCreate your README now as the file README.md.\n\n\n\n\n\n\nNote 1: Identifying R Dependencies\n\n\n\nR itself and the R packages are already documented as this project uses renv. Therefore you can focus on all other dependencies, such as the system dependencies of R packages as well as the version of Quarto.1\nAn overview over the system dependencies of R packages can be created using the function pak::pkg_sysreqs(). In combination with renv, we can obtain the system dependencies of all R packages the current project directly depends on:\n\n\nConsole\n\n# Find all R package dependencies\ndeps &lt;- renv::dependencies()$Package |&gt;\n  unique() |&gt;\n  pak::pkg_deps(dependencies = NA) |&gt;\n  getElement(\"package\")\n\n# Identify their system dependencies\npak::pkg_sysreqs(deps)\n\nThe output may look like the following:\n── Install scripts ────────────────── Fedora 40 ── \ndnf install -y make pandoc git\n\n── Packages and their system dependencies ────────\nfs        – make\nknitr     – pandoc\nremotes   – git\nrmarkdown – pandoc\nsass      – make\nWe can see that the programs make, pandoc, and git were identified as system dependencies. Often, one can obtain their version by running them with the --version argument:\n\n\nTerminal\n\nmake --version\npandoc --version\ngit --version\n\nHowever, this does not work for all system dependencies. Specifically, it does not work for libraries – software that is not supposed to be run on its own. Identifying their version is beyond the scope of this tutorial.\nWe also know that we need Quarto to create the PDF, so let’s find out its version as well:\n\n\nTerminal\n\nquarto --version\n\nIf you installed apaquarto or any other Quarto extension, one can query their versions as follows:2\n\n\nTerminal\n\nquarto list extensions\n\nFinally, we know that we installed a \\(\\TeX\\) distribution to create the PDF, so let’s find out its version by running:\n\n\nTerminal\n\nquarto check\n\nThe output is quite long and it might look slightly different for you, but the relevant sections are the following:\n[✓] Checking tools....................OK\n      TinyTeX: v2024.09\n      Chromium: (not installed)\n\n[✓] Checking LaTeX....................OK\n      Using: TinyTex\n      Path: /home/r155953/.TinyTeX/bin/x86_64-linux\n      Version: 2024\nOf course, all the system dependencies identified until now may have dependencies on their own. Use your own judgement to decide when not to dig deeper.\n\n\nIf you feel stuck, you can have a look at the following examples:\n\n\n\n\n\n\nTip 1: Name and Description\n\n\n\n\n\n\n\nREADME.md\n\n# Penguin Paper\n\nThis project contains the Quarto manuscript of our study on penguins (\"Manuscript.qmd\"). It is written in R and uses `renv` to track its dependencies.\n\nThe most important file in this project folder is `Manuscript.qmd` which contains the text of the article as well as the code for its computations. It is accompanied by the following files:\n\n- `Bibliography.bib`: bibliographic references used in the manuscript\n- `data.csv`: a data set containing the simplified `palmerpenguins` data\n- `data_dictionary.html`: a dictionary to the data file,\n  created using `data_dictionary.qmd`\n\nThe folder `_extensions` contains the `apaquarto` extension which is used to typeset the PDF accoording to APA guidelines.\n\n\n\n\n\n\n\n\n\n\nTip 2: Involved Data\n\n\n\n\n\n\n\nREADME.md\n\n## Involved Data\n\nThe manuscript analyzes the \"palmerpenguins\" data set available from &lt;https://cran.r-project.org/package=palmerpenguins&gt;. The data is stored as \"data.csv\" and documented in the file \"data_dictionary.html\". It is made available under CC0 1.0.\n\n\n\n\n\n\n\n\n\n\nTip 3: Computational Requirements\n\n\n\n\n\n\n\nREADME.md\n\n## Computational Requirements\n\nThis manuscript requires the following system software to be installed. In addition, we provide the version numbers this manuscript has last been run with:\n\n- [Quarto](https://quarto.org/docs/download/) 1.6.9\n- GNU Make 4.4.1\n- Pandoc 3.3\n- TinyTeX 2024.09\n- [R](https://cloud.r-project.org/) 4.4.1\n\nOn Fedora Linux, Make and Pandoc can be installed as follows:\n\n```bash\ndnf install -y make pandoc\n```\n\nQuarto and R can be installed using the links provided. TinyTeX can be installed using Quarto by entering the following into the terminal:\n\n```bash\nquarto install tinytex\n```\n\nAll R packages that this project requires are managed using [`renv`](https://cran.r-project.org/package=renv). Therefore, `renv` needs to be installed first, by entering the following in the R console:\n\n```r\ninstall.packages(\"renv\")\n```\n\nNext, one can open a new R session in the root folder of this project and run the following, which should install all required R packages at their recorded versions:\n\n```r\nrenv::restore()\n```\n\n\n\n\n\n\n\n\n\n\nTip 4: Usage\n\n\n\n\n\n\n\nREADME.md\n\n## Usage\n\nThe manuscript can be rendered to PDF using the following command:\n\n```bash\nquarto render Manuscript.qmd\n```\n\n\n\n\n\n\n\n\n\n\nTip 5: List of Results\n\n\n\n\n\n\n\nREADME.md\n\n## List of Results\n\n- In-text numbers in the section \"results\": Calculated in the chunk \"t-test\" within \"Manuscript.qmd\"\n- Table 1: Calculated in the chunk \"tbl-descriptive-statistics\" within \"Manuscript.qmd\"\n- Figure 2: Calculated in the chunk \"fig-bill-length-comparison\" within \"Manuscript.qmd\"\n\n\n\n\n\n\n\n\n\n\nTip 6: Citation\n\n\n\n\n\nYou need to add your name in the following example:\n\n\nREADME.md\n\n## Citation\n\nPlease cite this draft as follows:\n\n&gt; Zerna, Scheffel, & &lt;YOUR NAME&gt; (2024): \"A Study on Penguins: A Minimal Reproducible Example\". Unpublished manuscript.\n\n\n\n\n\n\n\n\n\n\nTip 7: License\n\n\n\n\n\nOf course, you would use the same license for the manuscript that you chose in the previous step. You need to add your name in the following example:\n\n\nREADME.md\n\n## License\n\nThe manuscript files `Manuscript.qmd`, `Manuscript.tex`, and `Manuscript.pdf` by Josephine Zerna, Christoph Scheffel, and &lt;YOUR NAME&gt; are available under [CC\\ BY-SA\\ 4.0](https://creativecommons.org/licenses/by-sa/4.0/) or (at your option) under the [AGPLv3](https://www.gnu.org/licenses/agpl-3.0.html) (or later). For further copyright information, see `LICENSE.txt`.",
    "crumbs": [
      "Home",
      "Make a README"
    ]
  },
  {
    "objectID": "make_readme.html#footnotes",
    "href": "make_readme.html#footnotes",
    "title": "Make a README",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAs of August 2024, a proposal for renv to record the version of Quarto has not been implemented, see rstudio/renv#1143.↩︎\nLuckily, the extensions are included in the project folder, so technically their version is already recorded in the project’s files.↩︎",
    "crumbs": [
      "Home",
      "Make a README"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "In the following, we will set the stage by highlighting the importance of sharing all materials, documenting their usage, and linking results with their computations.",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#the-importance-of-sharing",
    "href": "intro.html#the-importance-of-sharing",
    "title": "Introduction",
    "section": "The Importance of Sharing",
    "text": "The Importance of Sharing\nSuppose you are reading an article about a new imaging method to turn seismological data into subsurface images. The article describes the ideas that went into developing this method and presents a few examples to illustrate its superiority over previous approaches. You got interested and would like to apply this method to your own data. However, with only the article available, it could take months to come up with a working solution, if possible at all. This situation has been put aptly by Buckheit & Donoho (1995, p. 59, emphasis in original), distilling an idea by the geophysicist Jon Claerbout:\n\n“An article about computational science in a scientific publication is not the scholarship itself, it is merely advertising of the scholarship. The actual scholarship is the complete software development environment and the complete set of instructions which generated the figures.”\n\nEven when researchers merely apply existing methods (rather than report on a new method), sharing the source code and being transparent about the computational environment is imperative to making their results reproducible (Ince et al., 2012). By reproducibility, we mean “obtaining consistent results using the same input data; computational steps, methods, and code; and conditions of analysis” (National Academies of Sciences, Engineering, and Medicine, 2019, p. 46).",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#document-materials",
    "href": "intro.html#document-materials",
    "title": "Introduction",
    "section": "Document Materials",
    "text": "Document Materials\nHowever, there’s more to code publishing than sharing. Researchers should document (i.e., track) which data, software, images, texts, and other materials contributed to their work. In more elaborate terms, researchers should preserve the provenance of shared materials, for at least three tangible reasons:\n\nAcademic integrity: Providing citations for works that are not one’s own avoids plagiarism.\nComplying with the law: Providing attribution and license texts (among other things) may be a legal obligation when redistributing materials.\nFacilitating reproductions: Stating utilized software and data with their exact versions helps reproducers.\n\nOf course, when and how to reserve provenance varies for these reasons. Rephrasing someone’s text avoids issues of copyright, but may be plagiarism. And bibliographies of various styles may comply with scientific citation standards, but if they omit the first names of authors or the version number of computer programs, they might not help with matters of copyright or reproducibility.\nIn this tutorial, we’ll consider all of these reasons important. And there are even more: Documenting the provenance puts research into context and allows others to understand how it came about. Also, cited authors benefit from the citation as they gain potential readers.",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#linking-results-and-computations",
    "href": "intro.html#linking-results-and-computations",
    "title": "Introduction",
    "section": "Linking Results and Computations",
    "text": "Linking Results and Computations\nFor the purpose of this tutorial, tracking the provenance of results deserves particular attention. This means connecting them to the source code through the creation of dynamic documents. Rather than manually copying numerical results, figures, or tables, they are inserted automatically upon rendering of the article. Dynamic documents bundled together with any necessary data and auxiliary software are called research compendia (Gentleman & Temple Lang, 2007).\nThe practice to interleave narrative text with code has its roots in the paradigm of literate programming, where documentation and source code are treated as equals and are arranged in a way to maximize understanding (Knuth, 1984). Alternating text and code can be also found in notebook interfaces for exploratory programming (e.g., Wolfram Mathematica or Jupyter Notebooks, see Kluyver et al., 2016) that also have the capability to execute code and embed its output. With Sweave (Leisch, 2002), ideas from both world – literate programming and embedding program output – were combined into one tool for rendering dynamic documents using the R programming language. It is the predecessor of the R package knitr (Xie, 2015) which is being used under the hood in this tutorial.1\nLinking results with their computations has benefits for authors and readers. For the author, articles always contain the most recent version of figures, as they are updated automatically when the computation changes. For the readers, it enables understanding exactly how a particular result was obtained if they get access to the underlying research compendium.",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#best-practices",
    "href": "intro.html#best-practices",
    "title": "Introduction",
    "section": "Best Practices",
    "text": "Best Practices\nTo recap, in this tutorial you will share your materials, document their usage, and connect results to the underlying source code through the creation of a research compendium. Make sure to consider the following things along the way (by Arguillas et al., 2022, licensed under CC BY 4.0):\n\nDoes the research compendium contain everything needed to reproduce a predefined outcome in an organized and parsimonious way?\n\nCompleteness: The research compendium contains all of the objects needed to reproduce a predefined outcome.\nOrganization: It is easy to understand and keep track of the various objects in the research compendium and their relationship over time.\nEconomy: Fewer extraneous objects in the compendium mean fewer things that can break and require less maintenance over time.\n\nIs descriptive information about the research compendium and its components available and easy to understand?\n\nTransparency: The research compendium provides full disclosure of the research process that produced the scientific claim.\nDocumentation: Information describing compendium objects is provided in enough detail to enable independent understanding and use of the compendium.\n\nIs information about how the research compendium and its components can be used available and easy to understand?\n\nAccess: It is clear who can use what, how, and under what conditions, with open access preferred.\nProvenance: The origin of the components of the research compendium and how each has changed over time is evident.\n\nIs information about the research compendium and its components embedded in code?\n\nMetadata: Information about the research compendium and its component is embedded in a standardized, machine-readable code.\nAutomation: As much as possible, the computational workflow is script- or workflow-based so that the workflow can be re-executed using minimal actions.\n\nIs there a plan for reviewing the research compendium for FAIR and computational reproducibility standards over time?\n\nReview: A series of managed activities are needed to ensure continued access to and functionality of the research compendium and its components for as long as necessary.\n\n\nAlthough this tutorial guides you through the creation of a research compendium, you are invited to revisit these questions after completion and check whether and how each point was addressed (or not). Further, you can consult them as a checklist for future projects.",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#footnotes",
    "href": "intro.html#footnotes",
    "title": "Introduction",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSpecifically, Quarto employs knitr to execute chunks of R code.↩︎",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Project Setup",
    "section": "",
    "text": "We will start by setting up a simple example of a reproducible report.",
    "crumbs": [
      "Home",
      "Project Setup"
    ]
  },
  {
    "objectID": "setup.html#create-quarto-project",
    "href": "setup.html#create-quarto-project",
    "title": "Project Setup",
    "section": "Create Quarto Project",
    "text": "Create Quarto Project\nFirst, we will need to create a new Quarto project.\nIf you haven’t already, open RStudio – see Note 1 for how to use the terminal instead. Then, click on File &gt; New Project… to open the New Project Wizard.\n\n\n\n\n\nHere, select New Directory\n\n\n\n\n\nAnd choose the project type Quarto Project.\n\n\n\n\n\nFinally, enter the name of the directory where our report will be created in, for example code-publishing-exercise.\nAs we will use Git to track the version history of files, be sure to check Create a git repository. If you don’t know what Git is, have a look at the tutorial “Introduction to version control with git and GitHub within RStudio”.\n\n\n\n\n\nrenv: A dependency management toolkit for R\n\n\nAlso, we will utilize the package renv to track the R packages our project depends on. Using it makes it easier for others to view and obtain them at the exact same version at a later point in time. Therefore make sure that the box Use renv with this project is checked. Again, if this is the first time you are hearing about renv, have a look at the tutorial “Introduction to {renv}”.\nIf you are already familiar with Markdown and Quarto, you can uncheck the box Use visual markdown editor.\n\n\n\n\n\nClick on Create Project. Your RStudio window should now look similar to this:\n\n\n\n\n\nIf, like in the image, a Quarto file with some demo content was opened automatically, you can close and delete it, for example, using RStudio’s file manager.\nThroughout this tutorial, you will need to run both R code and system commands (primarily git and quarto). Within RStudio, R code can be run by going to the tab Console, while system commands are executed in the tab Terminal. We also indicate where to run your code directly above each code snippet. If no indication is given, the code is only for demonstration purposes and does not need to be run.\nMake sure that your project is in a consistent state according to renv by running:\n\n\nConsole\n\nrenv::status()\n\nIf it reports packages that are not used, synchronize the lock file using:\n\n\nConsole\n\nrenv::snapshot()\n\n\n\n\n\n\n\nTip 1\n\n\n\nAlways run renv::status() and resolve any inconsistencies before you commit code to your project. This way, every commit represents a working state of your project.\n\n\n\n\n\n\n\n\nNote 1: Without RStudio\n\n\n\n\n\nWithout RStudio, one can create a Quarto project with version control and renv enabled by typing the following into a terminal:\n\n\nTerminal\n\nquarto create project default code-publishing-exercise\ncd code-publishing-exercise/\nrm code-publishing-exercise.qmd\ngit init\ngit checkout -b main\n\nThen, one can open an R session by simply typing R into the terminal. Next, make sure that getwd() indicates that the working directory is code-publishing-exercise. Now, initialize renv:\n\n\nConsole\n\nrenv::init()\n\n\n\n\nYou are now ready to stage and commit your files. You can either stage files separately or the whole project folder at once. If you do the latter, we recommend you to inspect the untracked changes before staging all of them:\n\n\nIn file paths, a period (.) means “the current directory”, while two periods (..) mean “the parent directory”. Therefore git add . means “stage the current directory for committing”.\n\n\nTerminal\n\ngit status\n\nSince no commits have been made so far, this should include every file that is not covered by the .gitignore file. If everything can be staged for committing – as is the case in this tutorial – you can follow up with:\n\n\nTerminal\n\ngit add .\ngit commit -m \"Initial commit\"\n\nIf you see a file you’d rather not commit, delete it or add its name to the .gitignore file. If you don’t check your changes before committing, you might accidentally commit something you’d rather not.\n\n\n\n\n\n\nTip 2\n\n\n\nIf git commit fails with the message Author identity unknown, you need to tell Git who you are. Run the following commands to set your name and email address:\n\n\nTerminal\n\ngit config user.name \"YOUR NAME\"\ngit config user.email \"YOUR EMAIL ADDRESS\"\n\nThen, commit again.",
    "crumbs": [
      "Home",
      "Project Setup"
    ]
  },
  {
    "objectID": "setup.html#decide-on-structure",
    "href": "setup.html#decide-on-structure",
    "title": "Project Setup",
    "section": "Decide on Structure",
    "text": "Decide on Structure\nBefore adding your project files, it is helpful to decide on a folder structure, that is, how to call each file and where to put it. In general, the folder structure should facilitate understanding a project by breaking it into logical chunks. There is no single best solution, as a good structure depends on where a project’s complexity lies. However, it is usually helpful if the different files and folders reflect the execution order. For example, if there are multiple data processing stages, one can possibly differentiate input (raw data), intermediate (processed data), and output files (e.g., figures) and put them into separate folders. Similarly, the corresponding code files (e.g., preparation, modeling, visualization) can be prefixed with increasing numbers.\nLuckily, there are already numerous proposals for how to organize one’s project files, both general (e.g., Project TIER, 2021; Wilson et al., 2017) as well as specific to a particular programming language (e.g., Araya-Salas & Arriaga Madrigal, 2024; Marwick et al., 2018; Vuorre & Crump, 2021) or journal (Vilhuber, 2021). We recommend you to follow the standards of your field.\nIn this simple project, we will explore differences in bill length between male and female penguins. You can put all your files in the root folder of your project.\n\n\n\nArtwork by @allison_horst, licensed under CC0 1.0, adapted from original",
    "crumbs": [
      "Home",
      "Project Setup"
    ]
  },
  {
    "objectID": "setup.html#add-manuscript",
    "href": "setup.html#add-manuscript",
    "title": "Project Setup",
    "section": "Add Manuscript",
    "text": "Add Manuscript\nIn order to get you started, we have prepared a manuscript for you, alongside a bibliography file. Download the two files to your computer and put them into your project folder.\nManuscript.qmd Bibliography.bib\nThe manuscript already contains the narrative, but the results are still missing. It will be your job to conduct the data analysis. For now, add yourself as a co-author in the YAML header of the manuscript.\nTo create a PDF from the manuscript, you need to have a \\(\\TeX\\) distribution installed on your computer. A lightweight choice is TinyTeX, which can be installed with Quarto as follows:\n\n\nTerminal\n\nquarto install tinytex\n\nYou should now be able to render the document using Quarto:\n\n\nTerminal\n\nquarto render Manuscript.qmd\n\nThis should create a PDF file called Manuscript.pdf in your project folder.\nYou can now make your changes known to Git:\n\n\nTerminal\n\ngit status\ngit add .\ngit commit -m \"Add manuscript\"\n\nYou are now all set up to prepare your project folder for sharing!",
    "crumbs": [
      "Home",
      "Project Setup"
    ]
  }
]